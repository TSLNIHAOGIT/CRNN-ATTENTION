import os
import os.path as osp
import time

from tqdm import *

from config import cfg
from lang_dict.lang import LanguageIndex
from net.net_new import *
import math

from utils.img_utils import *
from losses import CTCLoss

os.environ["CUDA_VISIBLE_DEVICES"] = "0"
'''
类别翻译模型，数据decoder需要开始和结束的标志，这里可能也需要类似的技巧
'''

def max_length(tensor):
    return max(len(t) for t in tensor)


root = "example"
root=r'E:/tsl_file/python_project/all_datas'


def create_dataset_from_dir(root):
    img_names = os.listdir(root)
    img_paths = []
    for img_name in tqdm(img_names, desc="read dir:"):
        img_name = img_name.rstrip().strip()
        img_path = root + "/" + img_name
        # print('path exist',os.path.exists(img_path))
        if osp.exists(img_path):
            img_paths.append(img_path)
    labels = [img_path.split("/")[-1].split("_")[-2] for img_path in tqdm(img_paths, desc="generator label:")]
    # print('lables={},\nimg_pahts={}'.format(labels,img_path))
    return img_paths, labels


def create_dataset_from_file(root, file_path):
    with open(osp.join(root, file_path), "r") as f:
        readlines = f.readlines()

    img_paths = []
    for img_name in tqdm(readlines, desc="read dir:"):
        img_name = img_name.rstrip().strip()
        img_name = img_name.split(" ")[0]
        img_path = root + "/" + img_name
        # if osp.exists(img_path):
        img_paths.append(img_path)
    img_paths = img_paths[:1000000]
    labels = [img_path.split("/")[-1].split("_")[-1] for img_path in tqdm(img_paths, desc="generator label:")]
    labels=[each.split('.')[0] for each in labels]
    # print('labels_new={},\n,img_paths={}'.format(labels,img_paths))
    return img_paths, labels

def creat_table_look(table_path=None):
    with open(table_path) as f:
        inv_table = [char.strip() for char in f]
    num_classes = len(inv_table)
    blank_index = num_classes - 1

    table = tf.lookup.StaticHashTable(tf.lookup.TextFileInitializer(
        table_path, tf.string, tf.lookup.TextFileIndex.WHOLE_LINE,
        tf.int64, tf.lookup.TextFileIndex.LINE_NUMBER), blank_index)
    return table


def _convert_label(table, label):

    # According to official document, only dense tensor will run on GPU
    # or TPU, but I have tried convert label to dense tensor by `to_tensor`
    # and `row_lengths`, the speed of training step slower than sparse.
    '''
    label 0 ['NVC0', 'H1C42Y5CMM', 'M9T08K', '080WDG', '30', 'YZAEN9E', 'JXPWRUU3SF', 'RXCECG', 'PVJ', '8L6LDUC', '6N6C', 'J4341', '74FK72ZZCE', 'FHNW', 'XORC9QZ22I', 'W501C7', 'W7Z2O', 'X9FGH31S9', 'QPXIPII1', '2TITNTJU', 'SJ6', 'IA', 'NF0CL4C0F', '3UDM8V', 'LDS7Y', 'I1QS', 'D4ACESZDEX', '45BQYZB', '3H', 'RAK', 'CJINGL870', 'G2D', 'PA6TL4F', 'ZVOS8TB', 'P', 'SENITK11C', '6X5', 'M4DZQ8CN', 'MG', '5V92', 'WJXKF8BQA', 'UHMD44NON', '3S5R19T6X', 'TPLD0', 'BMA', '0NT', 'MVI07W', 'RN9BU', 'DEDE139TOU', '0FLKUW6', '2S7XX', 'E2UK7', '9I5', 'X', 'E0WJYR1QXJ', '8', 'FVW', 'WAUHSMN', '61MX98R4J', 'XIA6TA', '9B2Y1U', 'G', '3O6N3FFJ', 'UC2XZS', 'W813', '4RD4', 'U', 'M7EK', 'MJUADSXB', 'IEA', 'HPHWAFR', '00KA96207', 'YTTZJW', 'U430WE', 'BUGZ', 'LQP1SART70', '3OZWI9K3F', 'OQ49E0', 'N2', '7', 'N8FLG1Q2Y', '0G9', 'KMJMT3', 'N', '1VL170MJ', '1VFYO', 'I59W', 'S', 'D8J6YT', 'R', '2NN6B55I', 'ZZSG57DSQQ', 'EOLML', 'SV9OHNFE', 'W641U908E', '8TOC', '9SWGYB', '5K9T6QDG', '9TT3MD', 'MB7A', 'N28BC', 'QBM3VV', '8JWGG', 'MDBTD2OQV', 'VMFFPBOQ', 'T45SY6CSQ', 'NVL2M66', 'H', 'WA8PS9P4J', 'RARNKY5', '6AHMWAG', 'FHO1', 'SFPREH', 'JCYQO4', 'OZKOZBV', '6A3O', 'HN4', 'II', '2', 'N9C', '8D', 'MN3YJLCI', '9', '2MGG5TR7D', '9H40HKF', 'O3ZB97B', 'QIE', 'KQY', 'KM', '8ZAMW', 'X695LM', 'IW5Z0CI4J', 'J7H53', '8UKUEY', '408', 'CWSKQ0', 'LI58SK43U', 'P3VLFY', 'XRZ9N1', 'X', '92CJH', '4CED', 'MMPQ77', '7', 'X', 'M4OYQ', 'W0KXG0O', 'GN225DI7', '6', 'X', 'GN7L', 'TFL2DAR5', 'EF6S', 'WMA0EGM', '4ICC', 'UPLEGV6', 'C2A', 'X', '28HOL2', 'Z', '2LCK0JEP26', '3RY', 'UW3U1CN3G', '4HCR', 'CSAOEZYU', 'WJLW', 'J', 'D', 'BTMKV5J', 'FYD3', 'SQCBR53', 'FZ8', '93', '6EKCG', 'LZ9XJX', '16WB', 'JEP4M', '07SJW6IOQ', 'VD', '2B', 'RY', '45Y8NM', '0', 'VU47V2942', 'KUOX2', 'Y', 'AYTW6QOKZ', 'LKTKMA0OEY', 'MOJPQ', '61NJJ9CJ3D', 'H', '7VULKVDBAS', 'EDVQ28U36', 'UJHOO', 'TET1', '9TGR92BRG', 'EAY', 'QN', 'E4PHK', 'RDQK5', '5', 'U', 'OK', '06ERNE0', '5D', 'MFAV', '9UWG8Q', 'LH', 'K86SDG', '920F', 'V3', 'DY2Z', 'Q1D', '3V5', 'LFPX', 'C6', '0UN', 'NDC', 'G65', 'FG4XFS', '7PFRN3RSU', 'T5HW0KR9X', 'C99', 'V91EOZMFLV', 'YC5', 'QVEP009AS', 'HZ3S0Z8W', '8DK', 'IKIC', '66JW9LF', '5AN8', 'W', 'D13', 'M', 'RMQ6NBFOO', 'QPP', 'S', 'JFKI', 'L16F2R4QD2', '1ZBI3U', '7JG', '9U4VDSTXC', 'AMLRDYTD9', '74CO5911F', 'V', 'V', 'K738YXF', '09W3PO', 'FPJJTA4H', '7WD4HEUIG', 'QWPPD9', 'I0ZDO', 'UV18', 'WD5', 'VW', '79VE', 'OZD5', '4FSFQMCOB', 'CWFZLL', '3I6MG0', 'MZWD18', 'F7Y365', 'FHA6', '4U8H809PM', 'YFX50BI', 'WVS', '7VOZVKRK', 'QKMX6TD9', 'AQU7W6UWK2', '7FE3', '89TDRTV', 'S', 'MJR4GEN', '76E3', '5VY', '1R6VT', 'X', 'O2BS2BA', '4OSS', 'N27', 'LTFCFD6', 'ROL73Z', 'DL', 'EP', 'B9D1OQFBU3', '7CNIQVHCK', 'GGDV2NIU', '4', 'NA9O22SUNB', 'PMS6', 'SELSTI', '5IWRQZ74E3', 'S3I', 'CSLT']
    chars  <tf.RaggedTensor [[b'N', b'V', b'C', b'0'], [b'H', b'1', b'C', b'4', b'2', b'Y', b'5', b'C', b'M', b'M'], [b'M', b'9', b'T', b'0', b'8', b'K'], [b'0', b'8', b'0', b'W', b'D', b'G'], [b'3', b'0'], [b'Y', b'Z', b'A', b'E', b'N', b'9', b'E'], [b'J', b'X', b'P', b'W', b'R', b'U', b'U', b'3', b'S', b'F'], [b'R', b'X', b'C', b'E', b'C', b'G'], [b'P', b'V', b'J'], [b'8', b'L', b'6', b'L', b'D', b'U', b'C'], [b'6', b'N', b'6', b'C'], [b'J', b'4', b'3', b'4', b'1'], [b'7', b'4', b'F', b'K', b'7', b'2', b'Z', b'Z', b'C', b'E'], [b'F', b'H', b'N', b'W'], [b'X', b'O', b'R', b'C', b'9', b'Q', b'Z', b'2', b'2', b'I'], [b'W', b'5', b'0', b'1', b'C', b'7'], [b'W', b'7', b'Z', b'2', b'O'], [b'X', b'9', b'F', b'G', b'H', b'3', b'1', b'S', b'9'], [b'Q', b'P', b'X', b'I', b'P', b'I', b'I', b'1'], [b'2', b'T', b'I', b'T', b'N', b'T', b'J', b'U'], [b'S', b'J', b'6'], [b'I', b'A'], [b'N', b'F', b'0', b'C', b'L', b'4', b'C', b'0', b'F'], [b'3', b'U', b'D', b'M', b'8', b'V'], [b'L', b'D', b'S', b'7', b'Y'], [b'I', b'1', b'Q', b'S'], [b'D', b'4', b'A', b'C', b'E', b'S', b'Z', b'D', b'E', b'X'], [b'4', b'5', b'B', b'Q', b'Y', b'Z', b'B'], [b'3', b'H'], [b'R', b'A', b'K'], [b'C', b'J', b'I', b'N', b'G', b'L', b'8', b'7', b'0'], [b'G', b'2', b'D'], [b'P', b'A', b'6', b'T', b'L', b'4', b'F'], [b'Z', b'V', b'O', b'S', b'8', b'T', b'B'], [b'P'], [b'S', b'E', b'N', b'I', b'T', b'K', b'1', b'1', b'C'], [b'6', b'X', b'5'], [b'M', b'4', b'D', b'Z', b'Q', b'8', b'C', b'N'], [b'M', b'G'], [b'5', b'V', b'9', b'2'], [b'W', b'J', b'X', b'K', b'F', b'8', b'B', b'Q', b'A'], [b'U', b'H', b'M', b'D', b'4', b'4', b'N', b'O', b'N'], [b'3', b'S', b'5', b'R', b'1', b'9', b'T', b'6', b'X'], [b'T', b'P', b'L', b'D', b'0'], [b'B', b'M', b'A'], [b'0', b'N', b'T'], [b'M', b'V', b'I', b'0', b'7', b'W'], [b'R', b'N', b'9', b'B', b'U'], [b'D', b'E', b'D', b'E', b'1', b'3', b'9', b'T', b'O', b'U'], [b'0', b'F', b'L', b'K', b'U', b'W', b'6'], [b'2', b'S', b'7', b'X', b'X'], [b'E', b'2', b'U', b'K', b'7'], [b'9', b'I', b'5'], [b'X'], [b'E', b'0', b'W', b'J', b'Y', b'R', b'1', b'Q', b'X', b'J'], [b'8'], [b'F', b'V', b'W'], [b'W', b'A', b'U', b'H', b'S', b'M', b'N'], [b'6', b'1', b'M', b'X', b'9', b'8', b'R', b'4', b'J'], [b'X', b'I', b'A', b'6', b'T', b'A'], [b'9', b'B', b'2', b'Y', b'1', b'U'], [b'G'], [b'3', b'O', b'6', b'N', b'3', b'F', b'F', b'J'], [b'U', b'C', b'2', b'X', b'Z', b'S'], [b'W', b'8', b'1', b'3'], [b'4', b'R', b'D', b'4'], [b'U'], [b'M', b'7', b'E', b'K'], [b'M', b'J', b'U', b'A', b'D', b'S', b'X', b'B'], [b'I', b'E', b'A'], [b'H', b'P', b'H', b'W', b'A', b'F', b'R'], [b'0', b'0', b'K', b'A', b'9', b'6', b'2', b'0', b'7'], [b'Y', b'T', b'T', b'Z', b'J', b'W'], [b'U', b'4', b'3', b'0', b'W', b'E'], [b'B', b'U', b'G', b'Z'], [b'L', b'Q', b'P', b'1', b'S', b'A', b'R', b'T', b'7', b'0'], [b'3', b'O', b'Z', b'W', b'I', b'9', b'K', b'3', b'F'], [b'O', b'Q', b'4', b'9', b'E', b'0'], [b'N', b'2'], [b'7'], [b'N', b'8', b'F', b'L', b'G', b'1', b'Q', b'2', b'Y'], [b'0', b'G', b'9'], [b'K', b'M', b'J', b'M', b'T', b'3'], [b'N'], [b'1', b'V', b'L', b'1', b'7', b'0', b'M', b'J'], [b'1', b'V', b'F', b'Y', b'O'], [b'I', b'5', b'9', b'W'], [b'S'], [b'D', b'8', b'J', b'6', b'Y', b'T'], [b'R'], [b'2', b'N', b'N', b'6', b'B', b'5', b'5', b'I'], [b'Z', b'Z', b'S', b'G', b'5', b'7', b'D', b'S', b'Q', b'Q'], [b'E', b'O', b'L', b'M', b'L'], [b'S', b'V', b'9', b'O', b'H', b'N', b'F', b'E'], [b'W', b'6', b'4', b'1', b'U', b'9', b'0', b'8', b'E'], [b'8', b'T', b'O', b'C'], [b'9', b'S', b'W', b'G', b'Y', b'B'], [b'5', b'K', b'9', b'T', b'6', b'Q', b'D', b'G'], [b'9', b'T', b'T', b'3', b'M', b'D'], [b'M', b'B', b'7', b'A'], [b'N', b'2', b'8', b'B', b'C'], [b'Q', b'B', b'M', b'3', b'V', b'V'], [b'8', b'J', b'W', b'G', b'G'], [b'M', b'D', b'B', b'T', b'D', b'2', b'O', b'Q', b'V'], [b'V', b'M', b'F', b'F', b'P', b'B', b'O', b'Q'], [b'T', b'4', b'5', b'S', b'Y', b'6', b'C', b'S', b'Q'], [b'N', b'V', b'L', b'2', b'M', b'6', b'6'], [b'H'], [b'W', b'A', b'8', b'P', b'S', b'9', b'P', b'4', b'J'], [b'R', b'A', b'R', b'N', b'K', b'Y', b'5'], [b'6', b'A', b'H', b'M', b'W', b'A', b'G'], [b'F', b'H', b'O', b'1'], [b'S', b'F', b'P', b'R', b'E', b'H'], [b'J', b'C', b'Y', b'Q', b'O', b'4'], [b'O', b'Z', b'K', b'O', b'Z', b'B', b'V'], [b'6', b'A', b'3', b'O'], [b'H', b'N', b'4'], [b'I', b'I'], [b'2'], [b'N', b'9', b'C'], [b'8', b'D'], [b'M', b'N', b'3', b'Y', b'J', b'L', b'C', b'I'], [b'9'], [b'2', b'M', b'G', b'G', b'5', b'T', b'R', b'7', b'D'], [b'9', b'H', b'4', b'0', b'H', b'K', b'F'], [b'O', b'3', b'Z', b'B', b'9', b'7', b'B'], [b'Q', b'I', b'E'], [b'K', b'Q', b'Y'], [b'K', b'M'], [b'8', b'Z', b'A', b'M', b'W'], [b'X', b'6', b'9', b'5', b'L', b'M'], [b'I', b'W', b'5', b'Z', b'0', b'C', b'I', b'4', b'J'], [b'J', b'7', b'H', b'5', b'3'], [b'8', b'U', b'K', b'U', b'E', b'Y'], [b'4', b'0', b'8'], [b'C', b'W', b'S', b'K', b'Q', b'0'], [b'L', b'I', b'5', b'8', b'S', b'K', b'4', b'3', b'U'], [b'P', b'3', b'V', b'L', b'F', b'Y'], [b'X', b'R', b'Z', b'9', b'N', b'1'], [b'X'], [b'9', b'2', b'C', b'J', b'H'], [b'4', b'C', b'E', b'D'], [b'M', b'M', b'P', b'Q', b'7', b'7'], [b'7'], [b'X'], [b'M', b'4', b'O', b'Y', b'Q'], [b'W', b'0', b'K', b'X', b'G', b'0', b'O'], [b'G', b'N', b'2', b'2', b'5', b'D', b'I', b'7'], [b'6'], [b'X'], [b'G', b'N', b'7', b'L'], [b'T', b'F', b'L', b'2', b'D', b'A', b'R', b'5'], [b'E', b'F', b'6', b'S'], [b'W', b'M', b'A', b'0', b'E', b'G', b'M'], [b'4', b'I', b'C', b'C'], [b'U', b'P', b'L', b'E', b'G', b'V', b'6'], [b'C', b'2', b'A'], [b'X'], [b'2', b'8', b'H', b'O', b'L', b'2'], [b'Z'], [b'2', b'L', b'C', b'K', b'0', b'J', b'E', b'P', b'2', b'6'], [b'3', b'R', b'Y'], [b'U', b'W', b'3', b'U', b'1', b'C', b'N', b'3', b'G'], [b'4', b'H', b'C', b'R'], [b'C', b'S', b'A', b'O', b'E', b'Z', b'Y', b'U'], [b'W', b'J', b'L', b'W'], [b'J'], [b'D'], [b'B', b'T', b'M', b'K', b'V', b'5', b'J'], [b'F', b'Y', b'D', b'3'], [b'S', b'Q', b'C', b'B', b'R', b'5', b'3'], [b'F', b'Z', b'8'], [b'9', b'3'], [b'6', b'E', b'K', b'C', b'G'], [b'L', b'Z', b'9', b'X', b'J', b'X'], [b'1', b'6', b'W', b'B'], [b'J', b'E', b'P', b'4', b'M'], [b'0', b'7', b'S', b'J', b'W', b'6', b'I', b'O', b'Q'], [b'V', b'D'], [b'2', b'B'], [b'R', b'Y'], [b'4', b'5', b'Y', b'8', b'N', b'M'], [b'0'], [b'V', b'U', b'4', b'7', b'V', b'2', b'9', b'4', b'2'], [b'K', b'U', b'O', b'X', b'2'], [b'Y'], [b'A', b'Y', b'T', b'W', b'6', b'Q', b'O', b'K', b'Z'], [b'L', b'K', b'T', b'K', b'M', b'A', b'0', b'O', b'E', b'Y'], [b'M', b'O', b'J', b'P', b'Q'], [b'6', b'1', b'N', b'J', b'J', b'9', b'C', b'J', b'3', b'D'], [b'H'], [b'7', b'V', b'U', b'L', b'K', b'V', b'D', b'B', b'A', b'S'], [b'E', b'D', b'V', b'Q', b'2', b'8', b'U', b'3', b'6'], [b'U', b'J', b'H', b'O', b'O'], [b'T', b'E', b'T', b'1'], [b'9', b'T', b'G', b'R', b'9', b'2', b'B', b'R', b'G'], [b'E', b'A', b'Y'], [b'Q', b'N'], [b'E', b'4', b'P', b'H', b'K'], [b'R', b'D', b'Q', b'K', b'5'], [b'5'], [b'U'], [b'O', b'K'], [b'0', b'6', b'E', b'R', b'N', b'E', b'0'], [b'5', b'D'], [b'M', b'F', b'A', b'V'], [b'9', b'U', b'W', b'G', b'8', b'Q'], [b'L', b'H'], [b'K', b'8', b'6', b'S', b'D', b'G'], [b'9', b'2', b'0', b'F'], [b'V', b'3'], [b'D', b'Y', b'2', b'Z'], [b'Q', b'1', b'D'], [b'3', b'V', b'5'], [b'L', b'F', b'P', b'X'], [b'C', b'6'], [b'0', b'U', b'N'], [b'N', b'D', b'C'], [b'G', b'6', b'5'], [b'F', b'G', b'4', b'X', b'F', b'S'], [b'7', b'P', b'F', b'R', b'N', b'3', b'R', b'S', b'U'], [b'T', b'5', b'H', b'W', b'0', b'K', b'R', b'9', b'X'], [b'C', b'9', b'9'], [b'V', b'9', b'1', b'E', b'O', b'Z', b'M', b'F', b'L', b'V'], [b'Y', b'C', b'5'], [b'Q', b'V', b'E', b'P', b'0', b'0', b'9', b'A', b'S'], [b'H', b'Z', b'3', b'S', b'0', b'Z', b'8', b'W'], [b'8', b'D', b'K'], [b'I', b'K', b'I', b'C'], [b'6', b'6', b'J', b'W', b'9', b'L', b'F'], [b'5', b'A', b'N', b'8'], [b'W'], [b'D', b'1', b'3'], [b'M'], [b'R', b'M', b'Q', b'6', b'N', b'B', b'F', b'O', b'O'], [b'Q', b'P', b'P'], [b'S'], [b'J', b'F', b'K', b'I'], [b'L', b'1', b'6', b'F', b'2', b'R', b'4', b'Q', b'D', b'2'], [b'1', b'Z', b'B', b'I', b'3', b'U'], [b'7', b'J', b'G'], [b'9', b'U', b'4', b'V', b'D', b'S', b'T', b'X', b'C'], [b'A', b'M', b'L', b'R', b'D', b'Y', b'T', b'D', b'9'], [b'7', b'4', b'C', b'O', b'5', b'9', b'1', b'1', b'F'], [b'V'], [b'V'], [b'K', b'7', b'3', b'8', b'Y', b'X', b'F'], [b'0', b'9', b'W', b'3', b'P', b'O'], [b'F', b'P', b'J', b'J', b'T', b'A', b'4', b'H'], [b'7', b'W', b'D', b'4', b'H', b'E', b'U', b'I', b'G'], [b'Q', b'W', b'P', b'P', b'D', b'9'], [b'I', b'0', b'Z', b'D', b'O'], [b'U', b'V', b'1', b'8'], [b'W', b'D', b'5'], [b'V', b'W'], [b'7', b'9', b'V', b'E'], [b'O', b'Z', b'D', b'5'], [b'4', b'F', b'S', b'F', b'Q', b'M', b'C', b'O', b'B'], [b'C', b'W', b'F', b'Z', b'L', b'L'], [b'3', b'I', b'6', b'M', b'G', b'0'], [b'M', b'Z', b'W', b'D', b'1', b'8'], [b'F', b'7', b'Y', b'3', b'6', b'5'], [b'F', b'H', b'A', b'6'], [b'4', b'U', b'8', b'H', b'8', b'0', b'9', b'P', b'M'], [b'Y', b'F', b'X', b'5', b'0', b'B', b'I'], [b'W', b'V', b'S'], [b'7', b'V', b'O', b'Z', b'V', b'K', b'R', b'K'], [b'Q', b'K', b'M', b'X', b'6', b'T', b'D', b'9'], [b'A', b'Q', b'U', b'7', b'W', b'6', b'U', b'W', b'K', b'2'], [b'7', b'F', b'E', b'3'], [b'8', b'9', b'T', b'D', b'R', b'T', b'V'], [b'S'], [b'M', b'J', b'R', b'4', b'G', b'E', b'N'], [b'7', b'6', b'E', b'3'], [b'5', b'V', b'Y'], [b'1', b'R', b'6', b'V', b'T'], [b'X'], [b'O', b'2', b'B', b'S', b'2', b'B', b'A'], [b'4', b'O', b'S', b'S'], [b'N', b'2', b'7'], [b'L', b'T', b'F', b'C', b'F', b'D', b'6'], [b'R', b'O', b'L', b'7', b'3', b'Z'], [b'D', b'L'], [b'E', b'P'], [b'B', b'9', b'D', b'1', b'O', b'Q', b'F', b'B', b'U', b'3'], [b'7', b'C', b'N', b'I', b'Q', b'V', b'H', b'C', b'K'], [b'G', b'G', b'D', b'V', b'2', b'N', b'I', b'U'], [b'4'], [b'N', b'A', b'9', b'O', b'2', b'2', b'S', b'U', b'N', b'B'], [b'P', b'M', b'S', b'6'], [b'S', b'E', b'L', b'S', b'T', b'I'], [b'5', b'I', b'W', b'R', b'Q', b'Z', b'7', b'4', b'E', b'3'], [b'S', b'3', b'I'], [b'C', b'S', b'L', b'T']]>
    mapped label <tf.RaggedTensor [[49, 57, 38, 0], [43, 1, 38, 4, 2, 60, 5, 38, 48, 48], [48, 9, 55, 0, 8, 46], [0, 8, 0, 58, 39, 42], [3, 0], [60, 61, 36, 40, 49, 9, 40], [45, 59, 51, 58, 53, 56, 56, 3, 54, 41], [53, 59, 38, 40, 38, 42], [51, 57, 45], [8, 47, 6, 47, 39, 56, 38], [6, 49, 6, 38], [45, 4, 3, 4, 1], [7, 4, 41, 46, 7, 2, 61, 61, 38, 40], [41, 43, 49, 58], [59, 50, 53, 38, 9, 52, 61, 2, 2, 44], [58, 5, 0, 1, 38, 7], [58, 7, 61, 2, 50], [59, 9, 41, 42, 43, 3, 1, 54, 9], [52, 51, 59, 44, 51, 44, 44, 1], [2, 55, 44, 55, 49, 55, 45, 56], [54, 45, 6], [44, 36], [49, 41, 0, 38, 47, 4, 38, 0, 41], [3, 56, 39, 48, 8, 57], [47, 39, 54, 7, 60], [44, 1, 52, 54], [39, 4, 36, 38, 40, 54, 61, 39, 40, 59], [4, 5, 37, 52, 60, 61, 37], [3, 43], [53, 36, 46], [38, 45, 44, 49, 42, 47, 8, 7, 0], [42, 2, 39], [51, 36, 6, 55, 47, 4, 41], [61, 57, 50, 54, 8, 55, 37], [51], [54, 40, 49, 44, 55, 46, 1, 1, 38], [6, 59, 5], [48, 4, 39, 61, 52, 8, 38, 49], [48, 42], [5, 57, 9, 2], [58, 45, 59, 46, 41, 8, 37, 52, 36], [56, 43, 48, 39, 4, 4, 49, 50, 49], [3, 54, 5, 53, 1, 9, 55, 6, 59], [55, 51, 47, 39, 0], [37, 48, 36], [0, 49, 55], [48, 57, 44, 0, 7, 58], [53, 49, 9, 37, 56], [39, 40, 39, 40, 1, 3, 9, 55, 50, 56], [0, 41, 47, 46, 56, 58, 6], [2, 54, 7, 59, 59], [40, 2, 56, 46, 7], [9, 44, 5], [59], [40, 0, 58, 45, 60, 53, 1, 52, 59, 45], [8], [41, 57, 58], [58, 36, 56, 43, 54, 48, 49], [6, 1, 48, 59, 9, 8, 53, 4, 45], [59, 44, 36, 6, 55, 36], [9, 37, 2, 60, 1, 56], [42], [3, 50, 6, 49, 3, 41, 41, 45], [56, 38, 2, 59, 61, 54], [58, 8, 1, 3], [4, 53, 39, 4], [56], [48, 7, 40, 46], [48, 45, 56, 36, 39, 54, 59, 37], [44, 40, 36], [43, 51, 43, 58, 36, 41, 53], [0, 0, 46, 36, 9, 6, 2, 0, 7], [60, 55, 55, 61, 45, 58], [56, 4, 3, 0, 58, 40], [37, 56, 42, 61], [47, 52, 51, 1, 54, 36, 53, 55, 7, 0], [3, 50, 61, 58, 44, 9, 46, 3, 41], [50, 52, 4, 9, 40, 0], [49, 2], [7], [49, 8, 41, 47, 42, 1, 52, 2, 60], [0, 42, 9], [46, 48, 45, 48, 55, 3], [49], [1, 57, 47, 1, 7, 0, 48, 45], [1, 57, 41, 60, 50], [44, 5, 9, 58], [54], [39, 8, 45, 6, 60, 55], [53], [2, 49, 49, 6, 37, 5, 5, 44], [61, 61, 54, 42, 5, 7, 39, 54, 52, 52], [40, 50, 47, 48, 47], [54, 57, 9, 50, 43, 49, 41, 40], [58, 6, 4, 1, 56, 9, 0, 8, 40], [8, 55, 50, 38], [9, 54, 58, 42, 60, 37], [5, 46, 9, 55, 6, 52, 39, 42], [9, 55, 55, 3, 48, 39], [48, 37, 7, 36], [49, 2, 8, 37, 38], [52, 37, 48, 3, 57, 57], [8, 45, 58, 42, 42], [48, 39, 37, 55, 39, 2, 50, 52, 57], [57, 48, 41, 41, 51, 37, 50, 52], [55, 4, 5, 54, 60, 6, 38, 54, 52], [49, 57, 47, 2, 48, 6, 6], [43], [58, 36, 8, 51, 54, 9, 51, 4, 45], [53, 36, 53, 49, 46, 60, 5], [6, 36, 43, 48, 58, 36, 42], [41, 43, 50, 1], [54, 41, 51, 53, 40, 43], [45, 38, 60, 52, 50, 4], [50, 61, 46, 50, 61, 37, 57], [6, 36, 3, 50], [43, 49, 4], [44, 44], [2], [49, 9, 38], [8, 39], [48, 49, 3, 60, 45, 47, 38, 44], [9], [2, 48, 42, 42, 5, 55, 53, 7, 39], [9, 43, 4, 0, 43, 46, 41], [50, 3, 61, 37, 9, 7, 37], [52, 44, 40], [46, 52, 60], [46, 48], [8, 61, 36, 48, 58], [59, 6, 9, 5, 47, 48], [44, 58, 5, 61, 0, 38, 44, 4, 45], [45, 7, 43, 5, 3], [8, 56, 46, 56, 40, 60], [4, 0, 8], [38, 58, 54, 46, 52, 0], [47, 44, 5, 8, 54, 46, 4, 3, 56], [51, 3, 57, 47, 41, 60], [59, 53, 61, 9, 49, 1], [59], [9, 2, 38, 45, 43], [4, 38, 40, 39], [48, 48, 51, 52, 7, 7], [7], [59], [48, 4, 50, 60, 52], [58, 0, 46, 59, 42, 0, 50], [42, 49, 2, 2, 5, 39, 44, 7], [6], [59], [42, 49, 7, 47], [55, 41, 47, 2, 39, 36, 53, 5], [40, 41, 6, 54], [58, 48, 36, 0, 40, 42, 48], [4, 44, 38, 38], [56, 51, 47, 40, 42, 57, 6], [38, 2, 36], [59], [2, 8, 43, 50, 47, 2], [61], [2, 47, 38, 46, 0, 45, 40, 51, 2, 6], [3, 53, 60], [56, 58, 3, 56, 1, 38, 49, 3, 42], [4, 43, 38, 53], [38, 54, 36, 50, 40, 61, 60, 56], [58, 45, 47, 58], [45], [39], [37, 55, 48, 46, 57, 5, 45], [41, 60, 39, 3], [54, 52, 38, 37, 53, 5, 3], [41, 61, 8], [9, 3], [6, 40, 46, 38, 42], [47, 61, 9, 59, 45, 59], [1, 6, 58, 37], [45, 40, 51, 4, 48], [0, 7, 54, 45, 58, 6, 44, 50, 52], [57, 39], [2, 37], [53, 60], [4, 5, 60, 8, 49, 48], [0], [57, 56, 4, 7, 57, 2, 9, 4, 2], [46, 56, 50, 59, 2], [60], [36, 60, 55, 58, 6, 52, 50, 46, 61], [47, 46, 55, 46, 48, 36, 0, 50, 40, 60], [48, 50, 45, 51, 52], [6, 1, 49, 45, 45, 9, 38, 45, 3, 39], [43], [7, 57, 56, 47, 46, 57, 39, 37, 36, 54], [40, 39, 57, 52, 2, 8, 56, 3, 6], [56, 45, 43, 50, 50], [55, 40, 55, 1], [9, 55, 42, 53, 9, 2, 37, 53, 42], [40, 36, 60], [52, 49], [40, 4, 51, 43, 46], [53, 39, 52, 46, 5], [5], [56], [50, 46], [0, 6, 40, 53, 49, 40, 0], [5, 39], [48, 41, 36, 57], [9, 56, 58, 42, 8, 52], [47, 43], [46, 8, 6, 54, 39, 42], [9, 2, 0, 41], [57, 3], [39, 60, 2, 61], [52, 1, 39], [3, 57, 5], [47, 41, 51, 59], [38, 6], [0, 56, 49], [49, 39, 38], [42, 6, 5], [41, 42, 4, 59, 41, 54], [7, 51, 41, 53, 49, 3, 53, 54, 56], [55, 5, 43, 58, 0, 46, 53, 9, 59], [38, 9, 9], [57, 9, 1, 40, 50, 61, 48, 41, 47, 57], [60, 38, 5], [52, 57, 40, 51, 0, 0, 9, 36, 54], [43, 61, 3, 54, 0, 61, 8, 58], [8, 39, 46], [44, 46, 44, 38], [6, 6, 45, 58, 9, 47, 41], [5, 36, 49, 8], [58], [39, 1, 3], [48], [53, 48, 52, 6, 49, 37, 41, 50, 50], [52, 51, 51], [54], [45, 41, 46, 44], [47, 1, 6, 41, 2, 53, 4, 52, 39, 2], [1, 61, 37, 44, 3, 56], [7, 45, 42], [9, 56, 4, 57, 39, 54, 55, 59, 38], [36, 48, 47, 53, 39, 60, 55, 39, 9], [7, 4, 38, 50, 5, 9, 1, 1, 41], [57], [57], [46, 7, 3, 8, 60, 59, 41], [0, 9, 58, 3, 51, 50], [41, 51, 45, 45, 55, 36, 4, 43], [7, 58, 39, 4, 43, 40, 56, 44, 42], [52, 58, 51, 51, 39, 9], [44, 0, 61, 39, 50], [56, 57, 1, 8], [58, 39, 5], [57, 58], [7, 9, 57, 40], [50, 61, 39, 5], [4, 41, 54, 41, 52, 48, 38, 50, 37], [38, 58, 41, 61, 47, 47], [3, 44, 6, 48, 42, 0], [48, 61, 58, 39, 1, 8], [41, 7, 60, 3, 6, 5], [41, 43, 36, 6], [4, 56, 8, 43, 8, 0, 9, 51, 48], [60, 41, 59, 5, 0, 37, 44], [58, 57, 54], [7, 57, 50, 61, 57, 46, 53, 46], [52, 46, 48, 59, 6, 55, 39, 9], [36, 52, 56, 7, 58, 6, 56, 58, 46, 2], [7, 41, 40, 3], [8, 9, 55, 39, 53, 55, 57], [54], [48, 45, 53, 4, 42, 40, 49], [7, 6, 40, 3], [5, 57, 60], [1, 53, 6, 57, 55], [59], [50, 2, 37, 54, 2, 37, 36], [4, 50, 54, 54], [49, 2, 7], [47, 55, 41, 38, 41, 39, 6], [53, 50, 47, 7, 3, 61], [39, 47], [40, 51], [37, 9, 39, 1, 50, 52, 41, 37, 56, 3], [7, 38, 49, 44, 52, 57, 43, 38, 46], [42, 42, 39, 57, 2, 49, 44, 56], [4], [49, 36, 9, 50, 2, 2, 54, 56, 49, 37], [51, 48, 54, 6], [54, 40, 47, 54, 55, 44], [5, 44, 58, 53, 52, 61, 7, 4, 40, 3], [54, 3, 44], [38, 54, 47, 55]]>

    '''

    print('label 0', label)
    chars = tf.strings.unicode_split(label, input_encoding="UTF-8")
    print('chars ', chars)
    mapped_label = tf.ragged.map_flat_values(table.lookup, chars)
    print('mapped label', mapped_label)
    sparse_label = mapped_label.to_sparse()

    return sparse_label



def load_dataset(root):
    img_paths_tensor, labels = create_dataset_from_file(root, "annotation_attention.txt")
    print('labels start',labels)
    '''
    label 0 ['NVC0', 'H1C42Y5CMM', 'M9T08K', '080WDG', '30', 'YZAEN9E', 'JXPWRUU3SF', 'RXCECG', 'PVJ', '8L6LDUC', '6N6C', 'J4341', '74FK72ZZCE', 'FHNW', 'XORC9QZ22I', 'W501C7', 'W7Z2O', 'X9FGH31S9', 'QPXIPII1', '2TITNTJU', 'SJ6', 'IA', 'NF0CL4C0F', '3UDM8V', 'LDS7Y', 'I1QS', 'D4ACESZDEX', '45BQYZB', '3H', 'RAK', 'CJINGL870', 'G2D', 'PA6TL4F', 'ZVOS8TB', 'P', 'SENITK11C', '6X5', 'M4DZQ8CN', 'MG', '5V92', 'WJXKF8BQA', 'UHMD44NON', '3S5R19T6X', 'TPLD0', 'BMA', '0NT', 'MVI07W', 'RN9BU', 'DEDE139TOU', '0FLKUW6', '2S7XX', 'E2UK7', '9I5', 'X', 'E0WJYR1QXJ', '8', 'FVW', 'WAUHSMN', '61MX98R4J', 'XIA6TA', '9B2Y1U', 'G', '3O6N3FFJ', 'UC2XZS', 'W813', '4RD4', 'U', 'M7EK', 'MJUADSXB', 'IEA', 'HPHWAFR', '00KA96207', 'YTTZJW', 'U430WE', 'BUGZ', 'LQP1SART70', '3OZWI9K3F', 'OQ49E0', 'N2', '7', 'N8FLG1Q2Y', '0G9', 'KMJMT3', 'N', '1VL170MJ', '1VFYO', 'I59W', 'S', 'D8J6YT', 'R', '2NN6B55I', 'ZZSG57DSQQ', 'EOLML', 'SV9OHNFE', 'W641U908E', '8TOC', '9SWGYB', '5K9T6QDG', '9TT3MD', 'MB7A', 'N28BC', 'QBM3VV', '8JWGG', 'MDBTD2OQV', 'VMFFPBOQ', 'T45SY6CSQ', 'NVL2M66', 'H', 'WA8PS9P4J', 'RARNKY5', '6AHMWAG', 'FHO1', 'SFPREH', 'JCYQO4', 'OZKOZBV', '6A3O', 'HN4', 'II', '2', 'N9C', '8D', 'MN3YJLCI', '9', '2MGG5TR7D', '9H40HKF', 'O3ZB97B', 'QIE', 'KQY', 'KM', '8ZAMW', 'X695LM', 'IW5Z0CI4J', 'J7H53', '8UKUEY', '408', 'CWSKQ0', 'LI58SK43U', 'P3VLFY', 'XRZ9N1', 'X', '92CJH', '4CED', 'MMPQ77', '7', 'X', 'M4OYQ', 'W0KXG0O', 'GN225DI7', '6', 'X', 'GN7L', 'TFL2DAR5', 'EF6S', 'WMA0EGM', '4ICC', 'UPLEGV6', 'C2A', 'X', '28HOL2', 'Z', '2LCK0JEP26', '3RY', 'UW3U1CN3G', '4HCR', 'CSAOEZYU', 'WJLW', 'J', 'D', 'BTMKV5J', 'FYD3', 'SQCBR53', 'FZ8', '93', '6EKCG', 'LZ9XJX', '16WB', 'JEP4M', '07SJW6IOQ', 'VD', '2B', 'RY', '45Y8NM', '0', 'VU47V2942', 'KUOX2', 'Y', 'AYTW6QOKZ', 'LKTKMA0OEY', 'MOJPQ', '61NJJ9CJ3D', 'H', '7VULKVDBAS', 'EDVQ28U36', 'UJHOO', 'TET1', '9TGR92BRG', 'EAY', 'QN', 'E4PHK', 'RDQK5', '5', 'U', 'OK', '06ERNE0', '5D', 'MFAV', '9UWG8Q', 'LH', 'K86SDG', '920F', 'V3', 'DY2Z', 'Q1D', '3V5', 'LFPX', 'C6', '0UN', 'NDC', 'G65', 'FG4XFS', '7PFRN3RSU', 'T5HW0KR9X', 'C99', 'V91EOZMFLV', 'YC5', 'QVEP009AS', 'HZ3S0Z8W', '8DK', 'IKIC', '66JW9LF', '5AN8', 'W', 'D13', 'M', 'RMQ6NBFOO', 'QPP', 'S', 'JFKI', 'L16F2R4QD2', '1ZBI3U', '7JG', '9U4VDSTXC', 'AMLRDYTD9', '74CO5911F', 'V', 'V', 'K738YXF', '09W3PO', 'FPJJTA4H', '7WD4HEUIG', 'QWPPD9', 'I0ZDO', 'UV18', 'WD5', 'VW', '79VE', 'OZD5', '4FSFQMCOB', 'CWFZLL', '3I6MG0', 'MZWD18', 'F7Y365', 'FHA6', '4U8H809PM', 'YFX50BI', 'WVS', '7VOZVKRK', 'QKMX6TD9', 'AQU7W6UWK2', '7FE3', '89TDRTV', 'S', 'MJR4GEN', '76E3', '5VY', '1R6VT', 'X', 'O2BS2BA', '4OSS', 'N27', 'LTFCFD6', 'ROL73Z', 'DL', 'EP', 'B9D1OQFBU3', '7CNIQVHCK', 'GGDV2NIU', '4', 'NA9O22SUNB', 'PMS6', 'SELSTI', '5IWRQZ74E3', 'S3I', 'CSLT']
    chars  <tf.RaggedTensor [[b'N', b'V', b'C', b'0'], [b'H', b'1', b'C', b'4', b'2', b'Y', b'5', b'C', b'M', b'M'], [b'M', b'9', b'T', b'0', b'8', b'K'], [b'0', b'8', b'0', b'W', b'D', b'G'], [b'3', b'0'], [b'Y', b'Z', b'A', b'E', b'N', b'9', b'E'], [b'J', b'X', b'P', b'W', b'R', b'U', b'U', b'3', b'S', b'F'], [b'R', b'X', b'C', b'E', b'C', b'G'], [b'P', b'V', b'J'], [b'8', b'L', b'6', b'L', b'D', b'U', b'C'], [b'6', b'N', b'6', b'C'], [b'J', b'4', b'3', b'4', b'1'], [b'7', b'4', b'F', b'K', b'7', b'2', b'Z', b'Z', b'C', b'E'], [b'F', b'H', b'N', b'W'], [b'X', b'O', b'R', b'C', b'9', b'Q', b'Z', b'2', b'2', b'I'], [b'W', b'5', b'0', b'1', b'C', b'7'], [b'W', b'7', b'Z', b'2', b'O'], [b'X', b'9', b'F', b'G', b'H', b'3', b'1', b'S', b'9'], [b'Q', b'P', b'X', b'I', b'P', b'I', b'I', b'1'], [b'2', b'T', b'I', b'T', b'N', b'T', b'J', b'U'], [b'S', b'J', b'6'], [b'I', b'A'], [b'N', b'F', b'0', b'C', b'L', b'4', b'C', b'0', b'F'], [b'3', b'U', b'D', b'M', b'8', b'V'], [b'L', b'D', b'S', b'7', b'Y'], [b'I', b'1', b'Q', b'S'], [b'D', b'4', b'A', b'C', b'E', b'S', b'Z', b'D', b'E', b'X'], [b'4', b'5', b'B', b'Q', b'Y', b'Z', b'B'], [b'3', b'H'], [b'R', b'A', b'K'], [b'C', b'J', b'I', b'N', b'G', b'L', b'8', b'7', b'0'], [b'G', b'2', b'D'], [b'P', b'A', b'6', b'T', b'L', b'4', b'F'], [b'Z', b'V', b'O', b'S', b'8', b'T', b'B'], [b'P'], [b'S', b'E', b'N', b'I', b'T', b'K', b'1', b'1', b'C'], [b'6', b'X', b'5'], [b'M', b'4', b'D', b'Z', b'Q', b'8', b'C', b'N'], [b'M', b'G'], [b'5', b'V', b'9', b'2'], [b'W', b'J', b'X', b'K', b'F', b'8', b'B', b'Q', b'A'], [b'U', b'H', b'M', b'D', b'4', b'4', b'N', b'O', b'N'], [b'3', b'S', b'5', b'R', b'1', b'9', b'T', b'6', b'X'], [b'T', b'P', b'L', b'D', b'0'], [b'B', b'M', b'A'], [b'0', b'N', b'T'], [b'M', b'V', b'I', b'0', b'7', b'W'], [b'R', b'N', b'9', b'B', b'U'], [b'D', b'E', b'D', b'E', b'1', b'3', b'9', b'T', b'O', b'U'], [b'0', b'F', b'L', b'K', b'U', b'W', b'6'], [b'2', b'S', b'7', b'X', b'X'], [b'E', b'2', b'U', b'K', b'7'], [b'9', b'I', b'5'], [b'X'], [b'E', b'0', b'W', b'J', b'Y', b'R', b'1', b'Q', b'X', b'J'], [b'8'], [b'F', b'V', b'W'], [b'W', b'A', b'U', b'H', b'S', b'M', b'N'], [b'6', b'1', b'M', b'X', b'9', b'8', b'R', b'4', b'J'], [b'X', b'I', b'A', b'6', b'T', b'A'], [b'9', b'B', b'2', b'Y', b'1', b'U'], [b'G'], [b'3', b'O', b'6', b'N', b'3', b'F', b'F', b'J'], [b'U', b'C', b'2', b'X', b'Z', b'S'], [b'W', b'8', b'1', b'3'], [b'4', b'R', b'D', b'4'], [b'U'], [b'M', b'7', b'E', b'K'], [b'M', b'J', b'U', b'A', b'D', b'S', b'X', b'B'], [b'I', b'E', b'A'], [b'H', b'P', b'H', b'W', b'A', b'F', b'R'], [b'0', b'0', b'K', b'A', b'9', b'6', b'2', b'0', b'7'], [b'Y', b'T', b'T', b'Z', b'J', b'W'], [b'U', b'4', b'3', b'0', b'W', b'E'], [b'B', b'U', b'G', b'Z'], [b'L', b'Q', b'P', b'1', b'S', b'A', b'R', b'T', b'7', b'0'], [b'3', b'O', b'Z', b'W', b'I', b'9', b'K', b'3', b'F'], [b'O', b'Q', b'4', b'9', b'E', b'0'], [b'N', b'2'], [b'7'], [b'N', b'8', b'F', b'L', b'G', b'1', b'Q', b'2', b'Y'], [b'0', b'G', b'9'], [b'K', b'M', b'J', b'M', b'T', b'3'], [b'N'], [b'1', b'V', b'L', b'1', b'7', b'0', b'M', b'J'], [b'1', b'V', b'F', b'Y', b'O'], [b'I', b'5', b'9', b'W'], [b'S'], [b'D', b'8', b'J', b'6', b'Y', b'T'], [b'R'], [b'2', b'N', b'N', b'6', b'B', b'5', b'5', b'I'], [b'Z', b'Z', b'S', b'G', b'5', b'7', b'D', b'S', b'Q', b'Q'], [b'E', b'O', b'L', b'M', b'L'], [b'S', b'V', b'9', b'O', b'H', b'N', b'F', b'E'], [b'W', b'6', b'4', b'1', b'U', b'9', b'0', b'8', b'E'], [b'8', b'T', b'O', b'C'], [b'9', b'S', b'W', b'G', b'Y', b'B'], [b'5', b'K', b'9', b'T', b'6', b'Q', b'D', b'G'], [b'9', b'T', b'T', b'3', b'M', b'D'], [b'M', b'B', b'7', b'A'], [b'N', b'2', b'8', b'B', b'C'], [b'Q', b'B', b'M', b'3', b'V', b'V'], [b'8', b'J', b'W', b'G', b'G'], [b'M', b'D', b'B', b'T', b'D', b'2', b'O', b'Q', b'V'], [b'V', b'M', b'F', b'F', b'P', b'B', b'O', b'Q'], [b'T', b'4', b'5', b'S', b'Y', b'6', b'C', b'S', b'Q'], [b'N', b'V', b'L', b'2', b'M', b'6', b'6'], [b'H'], [b'W', b'A', b'8', b'P', b'S', b'9', b'P', b'4', b'J'], [b'R', b'A', b'R', b'N', b'K', b'Y', b'5'], [b'6', b'A', b'H', b'M', b'W', b'A', b'G'], [b'F', b'H', b'O', b'1'], [b'S', b'F', b'P', b'R', b'E', b'H'], [b'J', b'C', b'Y', b'Q', b'O', b'4'], [b'O', b'Z', b'K', b'O', b'Z', b'B', b'V'], [b'6', b'A', b'3', b'O'], [b'H', b'N', b'4'], [b'I', b'I'], [b'2'], [b'N', b'9', b'C'], [b'8', b'D'], [b'M', b'N', b'3', b'Y', b'J', b'L', b'C', b'I'], [b'9'], [b'2', b'M', b'G', b'G', b'5', b'T', b'R', b'7', b'D'], [b'9', b'H', b'4', b'0', b'H', b'K', b'F'], [b'O', b'3', b'Z', b'B', b'9', b'7', b'B'], [b'Q', b'I', b'E'], [b'K', b'Q', b'Y'], [b'K', b'M'], [b'8', b'Z', b'A', b'M', b'W'], [b'X', b'6', b'9', b'5', b'L', b'M'], [b'I', b'W', b'5', b'Z', b'0', b'C', b'I', b'4', b'J'], [b'J', b'7', b'H', b'5', b'3'], [b'8', b'U', b'K', b'U', b'E', b'Y'], [b'4', b'0', b'8'], [b'C', b'W', b'S', b'K', b'Q', b'0'], [b'L', b'I', b'5', b'8', b'S', b'K', b'4', b'3', b'U'], [b'P', b'3', b'V', b'L', b'F', b'Y'], [b'X', b'R', b'Z', b'9', b'N', b'1'], [b'X'], [b'9', b'2', b'C', b'J', b'H'], [b'4', b'C', b'E', b'D'], [b'M', b'M', b'P', b'Q', b'7', b'7'], [b'7'], [b'X'], [b'M', b'4', b'O', b'Y', b'Q'], [b'W', b'0', b'K', b'X', b'G', b'0', b'O'], [b'G', b'N', b'2', b'2', b'5', b'D', b'I', b'7'], [b'6'], [b'X'], [b'G', b'N', b'7', b'L'], [b'T', b'F', b'L', b'2', b'D', b'A', b'R', b'5'], [b'E', b'F', b'6', b'S'], [b'W', b'M', b'A', b'0', b'E', b'G', b'M'], [b'4', b'I', b'C', b'C'], [b'U', b'P', b'L', b'E', b'G', b'V', b'6'], [b'C', b'2', b'A'], [b'X'], [b'2', b'8', b'H', b'O', b'L', b'2'], [b'Z'], [b'2', b'L', b'C', b'K', b'0', b'J', b'E', b'P', b'2', b'6'], [b'3', b'R', b'Y'], [b'U', b'W', b'3', b'U', b'1', b'C', b'N', b'3', b'G'], [b'4', b'H', b'C', b'R'], [b'C', b'S', b'A', b'O', b'E', b'Z', b'Y', b'U'], [b'W', b'J', b'L', b'W'], [b'J'], [b'D'], [b'B', b'T', b'M', b'K', b'V', b'5', b'J'], [b'F', b'Y', b'D', b'3'], [b'S', b'Q', b'C', b'B', b'R', b'5', b'3'], [b'F', b'Z', b'8'], [b'9', b'3'], [b'6', b'E', b'K', b'C', b'G'], [b'L', b'Z', b'9', b'X', b'J', b'X'], [b'1', b'6', b'W', b'B'], [b'J', b'E', b'P', b'4', b'M'], [b'0', b'7', b'S', b'J', b'W', b'6', b'I', b'O', b'Q'], [b'V', b'D'], [b'2', b'B'], [b'R', b'Y'], [b'4', b'5', b'Y', b'8', b'N', b'M'], [b'0'], [b'V', b'U', b'4', b'7', b'V', b'2', b'9', b'4', b'2'], [b'K', b'U', b'O', b'X', b'2'], [b'Y'], [b'A', b'Y', b'T', b'W', b'6', b'Q', b'O', b'K', b'Z'], [b'L', b'K', b'T', b'K', b'M', b'A', b'0', b'O', b'E', b'Y'], [b'M', b'O', b'J', b'P', b'Q'], [b'6', b'1', b'N', b'J', b'J', b'9', b'C', b'J', b'3', b'D'], [b'H'], [b'7', b'V', b'U', b'L', b'K', b'V', b'D', b'B', b'A', b'S'], [b'E', b'D', b'V', b'Q', b'2', b'8', b'U', b'3', b'6'], [b'U', b'J', b'H', b'O', b'O'], [b'T', b'E', b'T', b'1'], [b'9', b'T', b'G', b'R', b'9', b'2', b'B', b'R', b'G'], [b'E', b'A', b'Y'], [b'Q', b'N'], [b'E', b'4', b'P', b'H', b'K'], [b'R', b'D', b'Q', b'K', b'5'], [b'5'], [b'U'], [b'O', b'K'], [b'0', b'6', b'E', b'R', b'N', b'E', b'0'], [b'5', b'D'], [b'M', b'F', b'A', b'V'], [b'9', b'U', b'W', b'G', b'8', b'Q'], [b'L', b'H'], [b'K', b'8', b'6', b'S', b'D', b'G'], [b'9', b'2', b'0', b'F'], [b'V', b'3'], [b'D', b'Y', b'2', b'Z'], [b'Q', b'1', b'D'], [b'3', b'V', b'5'], [b'L', b'F', b'P', b'X'], [b'C', b'6'], [b'0', b'U', b'N'], [b'N', b'D', b'C'], [b'G', b'6', b'5'], [b'F', b'G', b'4', b'X', b'F', b'S'], [b'7', b'P', b'F', b'R', b'N', b'3', b'R', b'S', b'U'], [b'T', b'5', b'H', b'W', b'0', b'K', b'R', b'9', b'X'], [b'C', b'9', b'9'], [b'V', b'9', b'1', b'E', b'O', b'Z', b'M', b'F', b'L', b'V'], [b'Y', b'C', b'5'], [b'Q', b'V', b'E', b'P', b'0', b'0', b'9', b'A', b'S'], [b'H', b'Z', b'3', b'S', b'0', b'Z', b'8', b'W'], [b'8', b'D', b'K'], [b'I', b'K', b'I', b'C'], [b'6', b'6', b'J', b'W', b'9', b'L', b'F'], [b'5', b'A', b'N', b'8'], [b'W'], [b'D', b'1', b'3'], [b'M'], [b'R', b'M', b'Q', b'6', b'N', b'B', b'F', b'O', b'O'], [b'Q', b'P', b'P'], [b'S'], [b'J', b'F', b'K', b'I'], [b'L', b'1', b'6', b'F', b'2', b'R', b'4', b'Q', b'D', b'2'], [b'1', b'Z', b'B', b'I', b'3', b'U'], [b'7', b'J', b'G'], [b'9', b'U', b'4', b'V', b'D', b'S', b'T', b'X', b'C'], [b'A', b'M', b'L', b'R', b'D', b'Y', b'T', b'D', b'9'], [b'7', b'4', b'C', b'O', b'5', b'9', b'1', b'1', b'F'], [b'V'], [b'V'], [b'K', b'7', b'3', b'8', b'Y', b'X', b'F'], [b'0', b'9', b'W', b'3', b'P', b'O'], [b'F', b'P', b'J', b'J', b'T', b'A', b'4', b'H'], [b'7', b'W', b'D', b'4', b'H', b'E', b'U', b'I', b'G'], [b'Q', b'W', b'P', b'P', b'D', b'9'], [b'I', b'0', b'Z', b'D', b'O'], [b'U', b'V', b'1', b'8'], [b'W', b'D', b'5'], [b'V', b'W'], [b'7', b'9', b'V', b'E'], [b'O', b'Z', b'D', b'5'], [b'4', b'F', b'S', b'F', b'Q', b'M', b'C', b'O', b'B'], [b'C', b'W', b'F', b'Z', b'L', b'L'], [b'3', b'I', b'6', b'M', b'G', b'0'], [b'M', b'Z', b'W', b'D', b'1', b'8'], [b'F', b'7', b'Y', b'3', b'6', b'5'], [b'F', b'H', b'A', b'6'], [b'4', b'U', b'8', b'H', b'8', b'0', b'9', b'P', b'M'], [b'Y', b'F', b'X', b'5', b'0', b'B', b'I'], [b'W', b'V', b'S'], [b'7', b'V', b'O', b'Z', b'V', b'K', b'R', b'K'], [b'Q', b'K', b'M', b'X', b'6', b'T', b'D', b'9'], [b'A', b'Q', b'U', b'7', b'W', b'6', b'U', b'W', b'K', b'2'], [b'7', b'F', b'E', b'3'], [b'8', b'9', b'T', b'D', b'R', b'T', b'V'], [b'S'], [b'M', b'J', b'R', b'4', b'G', b'E', b'N'], [b'7', b'6', b'E', b'3'], [b'5', b'V', b'Y'], [b'1', b'R', b'6', b'V', b'T'], [b'X'], [b'O', b'2', b'B', b'S', b'2', b'B', b'A'], [b'4', b'O', b'S', b'S'], [b'N', b'2', b'7'], [b'L', b'T', b'F', b'C', b'F', b'D', b'6'], [b'R', b'O', b'L', b'7', b'3', b'Z'], [b'D', b'L'], [b'E', b'P'], [b'B', b'9', b'D', b'1', b'O', b'Q', b'F', b'B', b'U', b'3'], [b'7', b'C', b'N', b'I', b'Q', b'V', b'H', b'C', b'K'], [b'G', b'G', b'D', b'V', b'2', b'N', b'I', b'U'], [b'4'], [b'N', b'A', b'9', b'O', b'2', b'2', b'S', b'U', b'N', b'B'], [b'P', b'M', b'S', b'6'], [b'S', b'E', b'L', b'S', b'T', b'I'], [b'5', b'I', b'W', b'R', b'Q', b'Z', b'7', b'4', b'E', b'3'], [b'S', b'3', b'I'], [b'C', b'S', b'L', b'T']]>
    mapped label <tf.RaggedTensor [[49, 57, 38, 0], [43, 1, 38, 4, 2, 60, 5, 38, 48, 48], [48, 9, 55, 0, 8, 46], [0, 8, 0, 58, 39, 42], [3, 0], [60, 61, 36, 40, 49, 9, 40], [45, 59, 51, 58, 53, 56, 56, 3, 54, 41], [53, 59, 38, 40, 38, 42], [51, 57, 45], [8, 47, 6, 47, 39, 56, 38], [6, 49, 6, 38], [45, 4, 3, 4, 1], [7, 4, 41, 46, 7, 2, 61, 61, 38, 40], [41, 43, 49, 58], [59, 50, 53, 38, 9, 52, 61, 2, 2, 44], [58, 5, 0, 1, 38, 7], [58, 7, 61, 2, 50], [59, 9, 41, 42, 43, 3, 1, 54, 9], [52, 51, 59, 44, 51, 44, 44, 1], [2, 55, 44, 55, 49, 55, 45, 56], [54, 45, 6], [44, 36], [49, 41, 0, 38, 47, 4, 38, 0, 41], [3, 56, 39, 48, 8, 57], [47, 39, 54, 7, 60], [44, 1, 52, 54], [39, 4, 36, 38, 40, 54, 61, 39, 40, 59], [4, 5, 37, 52, 60, 61, 37], [3, 43], [53, 36, 46], [38, 45, 44, 49, 42, 47, 8, 7, 0], [42, 2, 39], [51, 36, 6, 55, 47, 4, 41], [61, 57, 50, 54, 8, 55, 37], [51], [54, 40, 49, 44, 55, 46, 1, 1, 38], [6, 59, 5], [48, 4, 39, 61, 52, 8, 38, 49], [48, 42], [5, 57, 9, 2], [58, 45, 59, 46, 41, 8, 37, 52, 36], [56, 43, 48, 39, 4, 4, 49, 50, 49], [3, 54, 5, 53, 1, 9, 55, 6, 59], [55, 51, 47, 39, 0], [37, 48, 36], [0, 49, 55], [48, 57, 44, 0, 7, 58], [53, 49, 9, 37, 56], [39, 40, 39, 40, 1, 3, 9, 55, 50, 56], [0, 41, 47, 46, 56, 58, 6], [2, 54, 7, 59, 59], [40, 2, 56, 46, 7], [9, 44, 5], [59], [40, 0, 58, 45, 60, 53, 1, 52, 59, 45], [8], [41, 57, 58], [58, 36, 56, 43, 54, 48, 49], [6, 1, 48, 59, 9, 8, 53, 4, 45], [59, 44, 36, 6, 55, 36], [9, 37, 2, 60, 1, 56], [42], [3, 50, 6, 49, 3, 41, 41, 45], [56, 38, 2, 59, 61, 54], [58, 8, 1, 3], [4, 53, 39, 4], [56], [48, 7, 40, 46], [48, 45, 56, 36, 39, 54, 59, 37], [44, 40, 36], [43, 51, 43, 58, 36, 41, 53], [0, 0, 46, 36, 9, 6, 2, 0, 7], [60, 55, 55, 61, 45, 58], [56, 4, 3, 0, 58, 40], [37, 56, 42, 61], [47, 52, 51, 1, 54, 36, 53, 55, 7, 0], [3, 50, 61, 58, 44, 9, 46, 3, 41], [50, 52, 4, 9, 40, 0], [49, 2], [7], [49, 8, 41, 47, 42, 1, 52, 2, 60], [0, 42, 9], [46, 48, 45, 48, 55, 3], [49], [1, 57, 47, 1, 7, 0, 48, 45], [1, 57, 41, 60, 50], [44, 5, 9, 58], [54], [39, 8, 45, 6, 60, 55], [53], [2, 49, 49, 6, 37, 5, 5, 44], [61, 61, 54, 42, 5, 7, 39, 54, 52, 52], [40, 50, 47, 48, 47], [54, 57, 9, 50, 43, 49, 41, 40], [58, 6, 4, 1, 56, 9, 0, 8, 40], [8, 55, 50, 38], [9, 54, 58, 42, 60, 37], [5, 46, 9, 55, 6, 52, 39, 42], [9, 55, 55, 3, 48, 39], [48, 37, 7, 36], [49, 2, 8, 37, 38], [52, 37, 48, 3, 57, 57], [8, 45, 58, 42, 42], [48, 39, 37, 55, 39, 2, 50, 52, 57], [57, 48, 41, 41, 51, 37, 50, 52], [55, 4, 5, 54, 60, 6, 38, 54, 52], [49, 57, 47, 2, 48, 6, 6], [43], [58, 36, 8, 51, 54, 9, 51, 4, 45], [53, 36, 53, 49, 46, 60, 5], [6, 36, 43, 48, 58, 36, 42], [41, 43, 50, 1], [54, 41, 51, 53, 40, 43], [45, 38, 60, 52, 50, 4], [50, 61, 46, 50, 61, 37, 57], [6, 36, 3, 50], [43, 49, 4], [44, 44], [2], [49, 9, 38], [8, 39], [48, 49, 3, 60, 45, 47, 38, 44], [9], [2, 48, 42, 42, 5, 55, 53, 7, 39], [9, 43, 4, 0, 43, 46, 41], [50, 3, 61, 37, 9, 7, 37], [52, 44, 40], [46, 52, 60], [46, 48], [8, 61, 36, 48, 58], [59, 6, 9, 5, 47, 48], [44, 58, 5, 61, 0, 38, 44, 4, 45], [45, 7, 43, 5, 3], [8, 56, 46, 56, 40, 60], [4, 0, 8], [38, 58, 54, 46, 52, 0], [47, 44, 5, 8, 54, 46, 4, 3, 56], [51, 3, 57, 47, 41, 60], [59, 53, 61, 9, 49, 1], [59], [9, 2, 38, 45, 43], [4, 38, 40, 39], [48, 48, 51, 52, 7, 7], [7], [59], [48, 4, 50, 60, 52], [58, 0, 46, 59, 42, 0, 50], [42, 49, 2, 2, 5, 39, 44, 7], [6], [59], [42, 49, 7, 47], [55, 41, 47, 2, 39, 36, 53, 5], [40, 41, 6, 54], [58, 48, 36, 0, 40, 42, 48], [4, 44, 38, 38], [56, 51, 47, 40, 42, 57, 6], [38, 2, 36], [59], [2, 8, 43, 50, 47, 2], [61], [2, 47, 38, 46, 0, 45, 40, 51, 2, 6], [3, 53, 60], [56, 58, 3, 56, 1, 38, 49, 3, 42], [4, 43, 38, 53], [38, 54, 36, 50, 40, 61, 60, 56], [58, 45, 47, 58], [45], [39], [37, 55, 48, 46, 57, 5, 45], [41, 60, 39, 3], [54, 52, 38, 37, 53, 5, 3], [41, 61, 8], [9, 3], [6, 40, 46, 38, 42], [47, 61, 9, 59, 45, 59], [1, 6, 58, 37], [45, 40, 51, 4, 48], [0, 7, 54, 45, 58, 6, 44, 50, 52], [57, 39], [2, 37], [53, 60], [4, 5, 60, 8, 49, 48], [0], [57, 56, 4, 7, 57, 2, 9, 4, 2], [46, 56, 50, 59, 2], [60], [36, 60, 55, 58, 6, 52, 50, 46, 61], [47, 46, 55, 46, 48, 36, 0, 50, 40, 60], [48, 50, 45, 51, 52], [6, 1, 49, 45, 45, 9, 38, 45, 3, 39], [43], [7, 57, 56, 47, 46, 57, 39, 37, 36, 54], [40, 39, 57, 52, 2, 8, 56, 3, 6], [56, 45, 43, 50, 50], [55, 40, 55, 1], [9, 55, 42, 53, 9, 2, 37, 53, 42], [40, 36, 60], [52, 49], [40, 4, 51, 43, 46], [53, 39, 52, 46, 5], [5], [56], [50, 46], [0, 6, 40, 53, 49, 40, 0], [5, 39], [48, 41, 36, 57], [9, 56, 58, 42, 8, 52], [47, 43], [46, 8, 6, 54, 39, 42], [9, 2, 0, 41], [57, 3], [39, 60, 2, 61], [52, 1, 39], [3, 57, 5], [47, 41, 51, 59], [38, 6], [0, 56, 49], [49, 39, 38], [42, 6, 5], [41, 42, 4, 59, 41, 54], [7, 51, 41, 53, 49, 3, 53, 54, 56], [55, 5, 43, 58, 0, 46, 53, 9, 59], [38, 9, 9], [57, 9, 1, 40, 50, 61, 48, 41, 47, 57], [60, 38, 5], [52, 57, 40, 51, 0, 0, 9, 36, 54], [43, 61, 3, 54, 0, 61, 8, 58], [8, 39, 46], [44, 46, 44, 38], [6, 6, 45, 58, 9, 47, 41], [5, 36, 49, 8], [58], [39, 1, 3], [48], [53, 48, 52, 6, 49, 37, 41, 50, 50], [52, 51, 51], [54], [45, 41, 46, 44], [47, 1, 6, 41, 2, 53, 4, 52, 39, 2], [1, 61, 37, 44, 3, 56], [7, 45, 42], [9, 56, 4, 57, 39, 54, 55, 59, 38], [36, 48, 47, 53, 39, 60, 55, 39, 9], [7, 4, 38, 50, 5, 9, 1, 1, 41], [57], [57], [46, 7, 3, 8, 60, 59, 41], [0, 9, 58, 3, 51, 50], [41, 51, 45, 45, 55, 36, 4, 43], [7, 58, 39, 4, 43, 40, 56, 44, 42], [52, 58, 51, 51, 39, 9], [44, 0, 61, 39, 50], [56, 57, 1, 8], [58, 39, 5], [57, 58], [7, 9, 57, 40], [50, 61, 39, 5], [4, 41, 54, 41, 52, 48, 38, 50, 37], [38, 58, 41, 61, 47, 47], [3, 44, 6, 48, 42, 0], [48, 61, 58, 39, 1, 8], [41, 7, 60, 3, 6, 5], [41, 43, 36, 6], [4, 56, 8, 43, 8, 0, 9, 51, 48], [60, 41, 59, 5, 0, 37, 44], [58, 57, 54], [7, 57, 50, 61, 57, 46, 53, 46], [52, 46, 48, 59, 6, 55, 39, 9], [36, 52, 56, 7, 58, 6, 56, 58, 46, 2], [7, 41, 40, 3], [8, 9, 55, 39, 53, 55, 57], [54], [48, 45, 53, 4, 42, 40, 49], [7, 6, 40, 3], [5, 57, 60], [1, 53, 6, 57, 55], [59], [50, 2, 37, 54, 2, 37, 36], [4, 50, 54, 54], [49, 2, 7], [47, 55, 41, 38, 41, 39, 6], [53, 50, 47, 7, 3, 61], [39, 47], [40, 51], [37, 9, 39, 1, 50, 52, 41, 37, 56, 3], [7, 38, 49, 44, 52, 57, 43, 38, 46], [42, 42, 39, 57, 2, 49, 44, 56], [4], [49, 36, 9, 50, 2, 2, 54, 56, 49, 37], [51, 48, 54, 6], [54, 40, 47, 54, 55, 44], [5, 44, 58, 53, 52, 61, 7, 4, 40, 3], [54, 3, 44], [38, 54, 47, 55]]>

    # '''
    table_lk=creat_table_look(r'E:\tsl_file\python_project\CRNN-ATTENTION\example\table.txt')
    #convert——label应该加到map函数中
    sparse_label=_convert_label(table_lk, labels)
    print('sparse_label',sparse_label)



    '''
    labels 0 ['NVC0', 'H1C42Y5CMM', 'M9T08K', '080WDG', '30', 'YZAEN9E', 'JXPWRUU3SF', 'RXCECG', 'PVJ', '8L6LDUC', '6N6C', 'J4341', '74FK72ZZCE', 'FHNW', 'XORC9QZ22I', 'W501C7', 'W7Z2O', 'X9FGH31S9', 'QPXIPII1', '2TITNTJU', 'SJ6', 'IA', 'NF0CL4C0F', '3UDM8V', 'LDS7Y', 'I1QS', 'D4ACESZDEX', '45BQYZB', '3H', 'RAK', 'CJINGL870', 'G2D', 'PA6TL4F', 'ZVOS8TB', 'P', 'SENITK11C', '6X5', 'M4DZQ8CN', 'MG', '5V92', 'WJXKF8BQA', 'UHMD44NON', '3S5R19T6X', 'TPLD0', 'BMA', '0NT', 'MVI07W', 'RN9BU', 'DEDE139TOU', '0FLKUW6', '2S7XX', 'E2UK7', '9I5', 'X', 'E0WJYR1QXJ', '8', 'FVW', 'WAUHSMN', '61MX98R4J', 'XIA6TA', '9B2Y1U', 'G', '3O6N3FFJ', 'UC2XZS', 'W813', '4RD4', 'U', 'M7EK', 'MJUADSXB', 'IEA', 'HPHWAFR', '00KA96207', 'YTTZJW', 'U430WE', 'BUGZ', 'LQP1SART70', '3OZWI9K3F', 'OQ49E0', 'N2', '7', 'N8FLG1Q2Y', '0G9', 'KMJMT3', 'N', '1VL170MJ', '1VFYO', 'I59W', 'S', 'D8J6YT', 'R', '2NN6B55I', 'ZZSG57DSQQ', 'EOLML', 'SV9OHNFE', 'W641U908E', '8TOC', '9SWGYB', '5K9T6QDG', '9TT3MD', 'MB7A', 'N28BC', 'QBM3VV', '8JWGG', 'MDBTD2OQV', 'VMFFPBOQ', 'T45SY6CSQ', 'NVL2M66', 'H', 'WA8PS9P4J', 'RARNKY5', '6AHMWAG', 'FHO1', 'SFPREH', 'JCYQO4', 'OZKOZBV', '6A3O', 'HN4', 'II', '2', 'N9C', '8D', 'MN3YJLCI', '9', '2MGG5TR7D', '9H40HKF', 'O3ZB97B', 'QIE', 'KQY', 'KM', '8ZAMW', 'X695LM', 'IW5Z0CI4J', 'J7H53', '8UKUEY', '408', 'CWSKQ0', 'LI58SK43U', 'P3VLFY', 'XRZ9N1', 'X', '92CJH', '4CED', 'MMPQ77', '7', 'X', 'M4OYQ', 'W0KXG0O', 'GN225DI7', '6', 'X', 'GN7L', 'TFL2DAR5', 'EF6S', 'WMA0EGM', '4ICC', 'UPLEGV6', 'C2A', 'X', '28HOL2', 'Z', '2LCK0JEP26', '3RY', 'UW3U1CN3G', '4HCR', 'CSAOEZYU', 'WJLW', 'J', 'D', 'BTMKV5J', 'FYD3', 'SQCBR53', 'FZ8', '93', '6EKCG', 'LZ9XJX', '16WB', 'JEP4M', '07SJW6IOQ', 'VD', '2B', 'RY', '45Y8NM', '0', 'VU47V2942', 'KUOX2', 'Y', 'AYTW6QOKZ', 'LKTKMA0OEY', 'MOJPQ', '61NJJ9CJ3D', 'H', '7VULKVDBAS', 'EDVQ28U36', 'UJHOO', 'TET1', '9TGR92BRG', 'EAY', 'QN', 'E4PHK', 'RDQK5', '5', 'U', 'OK', '06ERNE0', '5D', 'MFAV', '9UWG8Q', 'LH', 'K86SDG', '920F', 'V3', 'DY2Z', 'Q1D', '3V5', 'LFPX', 'C6', '0UN', 'NDC', 'G65', 'FG4XFS', '7PFRN3RSU', 'T5HW0KR9X', 'C99', 'V91EOZMFLV', 'YC5', 'QVEP009AS', 'HZ3S0Z8W', '8DK', 'IKIC', '66JW9LF', '5AN8', 'W', 'D13', 'M', 'RMQ6NBFOO', 'QPP', 'S', 'JFKI', 'L16F2R4QD2', '1ZBI3U', '7JG', '9U4VDSTXC', 'AMLRDYTD9', '74CO5911F', 'V', 'V', 'K738YXF', '09W3PO', 'FPJJTA4H', '7WD4HEUIG', 'QWPPD9', 'I0ZDO', 'UV18', 'WD5', 'VW', '79VE', 'OZD5', '4FSFQMCOB', 'CWFZLL', '3I6MG0', 'MZWD18', 'F7Y365', 'FHA6', '4U8H809PM', 'YFX50BI', 'WVS', '7VOZVKRK', 'QKMX6TD9', 'AQU7W6UWK2', '7FE3', '89TDRTV', 'S', 'MJR4GEN', '76E3', '5VY', '1R6VT', 'X', 'O2BS2BA', '4OSS', 'N27', 'LTFCFD6', 'ROL73Z', 'DL', 'EP', 'B9D1OQFBU3', '7CNIQVHCK', 'GGDV2NIU', '4', 'NA9O22SUNB', 'PMS6', 'SELSTI', '5IWRQZ74E3', 'S3I', 'CSLT']
    processed_labels  ['<start> N V C 0  <end>', '<start> H 1 C 4 2 Y 5 C M M  <end>', '<start> M 9 T 0 8 K  <end>', '<start> 0 8 0 W D G  <end>', '<start> 3 0  <end>', '<start> Y Z A E N 9 E  <end>', '<start> J X P W R U U 3 S F  <end>', '<start> R X C E C G  <end>', '<start> P V J  <end>', '<start> 8 L 6 L D U C  <end>', '<start> 6 N 6 C  <end>', '<start> J 4 3 4 1  <end>', '<start> 7 4 F K 7 2 Z Z C E  <end>', '<start> F H N W  <end>', '<start> X O R C 9 Q Z 2 2 I  <end>', '<start> W 5 0 1 C 7  <end>', '<start> W 7 Z 2 O  <end>', '<start> X 9 F G H 3 1 S 9  <end>', '<start> Q P X I P I I 1  <end>', '<start> 2 T I T N T J U  <end>', '<start> S J 6  <end>', '<start> I A  <end>', '<start> N F 0 C L 4 C 0 F  <end>', '<start> 3 U D M 8 V  <end>', '<start> L D S 7 Y  <end>', '<start> I 1 Q S  <end>', '<start> D 4 A C E S Z D E X  <end>', '<start> 4 5 B Q Y Z B  <end>', '<start> 3 H  <end>', '<start> R A K  <end>', '<start> C J I N G L 8 7 0  <end>', '<start> G 2 D  <end>', '<start> P A 6 T L 4 F  <end>', '<start> Z V O S 8 T B  <end>', '<start> P  <end>', '<start> S E N I T K 1 1 C  <end>', '<start> 6 X 5  <end>', '<start> M 4 D Z Q 8 C N  <end>', '<start> M G  <end>', '<start> 5 V 9 2  <end>', '<start> W J X K F 8 B Q A  <end>', '<start> U H M D 4 4 N O N  <end>', '<start> 3 S 5 R 1 9 T 6 X  <end>', '<start> T P L D 0  <end>', '<start> B M A  <end>', '<start> 0 N T  <end>', '<start> M V I 0 7 W  <end>', '<start> R N 9 B U  <end>', '<start> D E D E 1 3 9 T O U  <end>', '<start> 0 F L K U W 6  <end>', '<start> 2 S 7 X X  <end>', '<start> E 2 U K 7  <end>', '<start> 9 I 5  <end>', '<start> X  <end>', '<start> E 0 W J Y R 1 Q X J  <end>', '<start> 8  <end>', '<start> F V W  <end>', '<start> W A U H S M N  <end>', '<start> 6 1 M X 9 8 R 4 J  <end>', '<start> X I A 6 T A  <end>', '<start> 9 B 2 Y 1 U  <end>', '<start> G  <end>', '<start> 3 O 6 N 3 F F J  <end>', '<start> U C 2 X Z S  <end>', '<start> W 8 1 3  <end>', '<start> 4 R D 4  <end>', '<start> U  <end>', '<start> M 7 E K  <end>', '<start> M J U A D S X B  <end>', '<start> I E A  <end>', '<start> H P H W A F R  <end>', '<start> 0 0 K A 9 6 2 0 7  <end>', '<start> Y T T Z J W  <end>', '<start> U 4 3 0 W E  <end>', '<start> B U G Z  <end>', '<start> L Q P 1 S A R T 7 0  <end>', '<start> 3 O Z W I 9 K 3 F  <end>', '<start> O Q 4 9 E 0  <end>', '<start> N 2  <end>', '<start> 7  <end>', '<start> N 8 F L G 1 Q 2 Y  <end>', '<start> 0 G 9  <end>', '<start> K M J M T 3  <end>', '<start> N  <end>', '<start> 1 V L 1 7 0 M J  <end>', '<start> 1 V F Y O  <end>', '<start> I 5 9 W  <end>', '<start> S  <end>', '<start> D 8 J 6 Y T  <end>', '<start> R  <end>', '<start> 2 N N 6 B 5 5 I  <end>', '<start> Z Z S G 5 7 D S Q Q  <end>', '<start> E O L M L  <end>', '<start> S V 9 O H N F E  <end>', '<start> W 6 4 1 U 9 0 8 E  <end>', '<start> 8 T O C  <end>', '<start> 9 S W G Y B  <end>', '<start> 5 K 9 T 6 Q D G  <end>', '<start> 9 T T 3 M D  <end>', '<start> M B 7 A  <end>', '<start> N 2 8 B C  <end>', '<start> Q B M 3 V V  <end>', '<start> 8 J W G G  <end>', '<start> M D B T D 2 O Q V  <end>', '<start> V M F F P B O Q  <end>', '<start> T 4 5 S Y 6 C S Q  <end>', '<start> N V L 2 M 6 6  <end>', '<start> H  <end>', '<start> W A 8 P S 9 P 4 J  <end>', '<start> R A R N K Y 5  <end>', '<start> 6 A H M W A G  <end>', '<start> F H O 1  <end>', '<start> S F P R E H  <end>', '<start> J C Y Q O 4  <end>', '<start> O Z K O Z B V  <end>', '<start> 6 A 3 O  <end>', '<start> H N 4  <end>', '<start> I I  <end>', '<start> 2  <end>', '<start> N 9 C  <end>', '<start> 8 D  <end>', '<start> M N 3 Y J L C I  <end>', '<start> 9  <end>', '<start> 2 M G G 5 T R 7 D  <end>', '<start> 9 H 4 0 H K F  <end>', '<start> O 3 Z B 9 7 B  <end>', '<start> Q I E  <end>', '<start> K Q Y  <end>', '<start> K M  <end>', '<start> 8 Z A M W  <end>', '<start> X 6 9 5 L M  <end>', '<start> I W 5 Z 0 C I 4 J  <end>', '<start> J 7 H 5 3  <end>', '<start> 8 U K U E Y  <end>', '<start> 4 0 8  <end>', '<start> C W S K Q 0  <end>', '<start> L I 5 8 S K 4 3 U  <end>', '<start> P 3 V L F Y  <end>', '<start> X R Z 9 N 1  <end>', '<start> X  <end>', '<start> 9 2 C J H  <end>', '<start> 4 C E D  <end>', '<start> M M P Q 7 7  <end>', '<start> 7  <end>', '<start> X  <end>', '<start> M 4 O Y Q  <end>', '<start> W 0 K X G 0 O  <end>', '<start> G N 2 2 5 D I 7  <end>', '<start> 6  <end>', '<start> X  <end>', '<start> G N 7 L  <end>', '<start> T F L 2 D A R 5  <end>', '<start> E F 6 S  <end>', '<start> W M A 0 E G M  <end>', '<start> 4 I C C  <end>', '<start> U P L E G V 6  <end>', '<start> C 2 A  <end>', '<start> X  <end>', '<start> 2 8 H O L 2  <end>', '<start> Z  <end>', '<start> 2 L C K 0 J E P 2 6  <end>', '<start> 3 R Y  <end>', '<start> U W 3 U 1 C N 3 G  <end>', '<start> 4 H C R  <end>', '<start> C S A O E Z Y U  <end>', '<start> W J L W  <end>', '<start> J  <end>', '<start> D  <end>', '<start> B T M K V 5 J  <end>', '<start> F Y D 3  <end>', '<start> S Q C B R 5 3  <end>', '<start> F Z 8  <end>', '<start> 9 3  <end>', '<start> 6 E K C G  <end>', '<start> L Z 9 X J X  <end>', '<start> 1 6 W B  <end>', '<start> J E P 4 M  <end>', '<start> 0 7 S J W 6 I O Q  <end>', '<start> V D  <end>', '<start> 2 B  <end>', '<start> R Y  <end>', '<start> 4 5 Y 8 N M  <end>', '<start> 0  <end>', '<start> V U 4 7 V 2 9 4 2  <end>', '<start> K U O X 2  <end>', '<start> Y  <end>', '<start> A Y T W 6 Q O K Z  <end>', '<start> L K T K M A 0 O E Y  <end>', '<start> M O J P Q  <end>', '<start> 6 1 N J J 9 C J 3 D  <end>', '<start> H  <end>', '<start> 7 V U L K V D B A S  <end>', '<start> E D V Q 2 8 U 3 6  <end>', '<start> U J H O O  <end>', '<start> T E T 1  <end>', '<start> 9 T G R 9 2 B R G  <end>', '<start> E A Y  <end>', '<start> Q N  <end>', '<start> E 4 P H K  <end>', '<start> R D Q K 5  <end>', '<start> 5  <end>', '<start> U  <end>', '<start> O K  <end>', '<start> 0 6 E R N E 0  <end>', '<start> 5 D  <end>', '<start> M F A V  <end>', '<start> 9 U W G 8 Q  <end>', '<start> L H  <end>', '<start> K 8 6 S D G  <end>', '<start> 9 2 0 F  <end>', '<start> V 3  <end>', '<start> D Y 2 Z  <end>', '<start> Q 1 D  <end>', '<start> 3 V 5  <end>', '<start> L F P X  <end>', '<start> C 6  <end>', '<start> 0 U N  <end>', '<start> N D C  <end>', '<start> G 6 5  <end>', '<start> F G 4 X F S  <end>', '<start> 7 P F R N 3 R S U  <end>', '<start> T 5 H W 0 K R 9 X  <end>', '<start> C 9 9  <end>', '<start> V 9 1 E O Z M F L V  <end>', '<start> Y C 5  <end>', '<start> Q V E P 0 0 9 A S  <end>', '<start> H Z 3 S 0 Z 8 W  <end>', '<start> 8 D K  <end>', '<start> I K I C  <end>', '<start> 6 6 J W 9 L F  <end>', '<start> 5 A N 8  <end>', '<start> W  <end>', '<start> D 1 3  <end>', '<start> M  <end>', '<start> R M Q 6 N B F O O  <end>', '<start> Q P P  <end>', '<start> S  <end>', '<start> J F K I  <end>', '<start> L 1 6 F 2 R 4 Q D 2  <end>', '<start> 1 Z B I 3 U  <end>', '<start> 7 J G  <end>', '<start> 9 U 4 V D S T X C  <end>', '<start> A M L R D Y T D 9  <end>', '<start> 7 4 C O 5 9 1 1 F  <end>', '<start> V  <end>', '<start> V  <end>', '<start> K 7 3 8 Y X F  <end>', '<start> 0 9 W 3 P O  <end>', '<start> F P J J T A 4 H  <end>', '<start> 7 W D 4 H E U I G  <end>', '<start> Q W P P D 9  <end>', '<start> I 0 Z D O  <end>', '<start> U V 1 8  <end>', '<start> W D 5  <end>', '<start> V W  <end>', '<start> 7 9 V E  <end>', '<start> O Z D 5  <end>', '<start> 4 F S F Q M C O B  <end>', '<start> C W F Z L L  <end>', '<start> 3 I 6 M G 0  <end>', '<start> M Z W D 1 8  <end>', '<start> F 7 Y 3 6 5  <end>', '<start> F H A 6  <end>', '<start> 4 U 8 H 8 0 9 P M  <end>', '<start> Y F X 5 0 B I  <end>', '<start> W V S  <end>', '<start> 7 V O Z V K R K  <end>', '<start> Q K M X 6 T D 9  <end>', '<start> A Q U 7 W 6 U W K 2  <end>', '<start> 7 F E 3  <end>', '<start> 8 9 T D R T V  <end>', '<start> S  <end>', '<start> M J R 4 G E N  <end>', '<start> 7 6 E 3  <end>', '<start> 5 V Y  <end>', '<start> 1 R 6 V T  <end>', '<start> X  <end>', '<start> O 2 B S 2 B A  <end>', '<start> 4 O S S  <end>', '<start> N 2 7  <end>', '<start> L T F C F D 6  <end>', '<start> R O L 7 3 Z  <end>', '<start> D L  <end>', '<start> E P  <end>', '<start> B 9 D 1 O Q F B U 3  <end>', '<start> 7 C N I Q V H C K  <end>', '<start> G G D V 2 N I U  <end>', '<start> 4  <end>', '<start> N A 9 O 2 2 S U N B  <end>', '<start> P M S 6  <end>', '<start> S E L S T I  <end>', '<start> 5 I W R Q Z 7 4 E 3  <end>', '<start> S 3 I  <end>', '<start> C S L T  <end>']

    '''
    labels = [label for label in labels]
    print('labels 0',labels)

    processed_labels = [preprocess_label(label) for label in tqdm(labels, desc="process label:")]
    print('processed_labels ',processed_labels )

    label_lang = LanguageIndex()

    labels_tensor = [[label_lang.word2idx[s] for s in label.split(' ')] for label in processed_labels]

    #去掉首和尾，空（已改正），索引减去4就和上面一样的
    #labels_tensor [[1, 53, 61, 42, 4, 3, 2], [1, 47, 5, 42, 8, 6, 64, 9, 42, 52, 52, 3, 2], [1, 52, 13, 59, 4, 12, 50, 3, 2], [1, 4, 12, 4, 62, 43, 46, 3, 2], [1, 7, 4, 3, 2], [1, 64, 65, 40, 44, 53, 13, 44, 3, 2], [1, 49, 63, 55, 62, 57, 60, 60, 7, 58, 45, 3, 2], [1, 57, 63, 42, 44, 42, 46, 3, 2], [1, 55, 61, 49, 3, 2], [1, 12, 51, 10, 51, 43, 60, 42, 3, 2], [1, 10, 53, 10, 42, 3, 2], [1, 49, 8, 7, 8, 5, 3, 2], [1, 11, 8, 45, 50, 11, 6, 65, 65, 42, 44, 3, 2], [1, 45, 47, 53, 62, 3, 2], [1, 63, 54, 57, 42, 13, 56, 65, 6, 6, 48, 3, 2], [1, 62, 9, 4, 5, 42, 11, 3, 2], [1, 62, 11, 65, 6, 54, 3, 2], [1, 63, 13, 45, 46, 47, 7, 5, 58, 13, 3, 2], [1, 56, 55, 63, 48, 55, 48, 48, 5, 3, 2], [1, 6, 59, 48, 59, 53, 59, 49, 60, 3, 2], [1, 58, 49, 10, 3, 2], [1, 48, 40, 3, 2], [1, 53, 45, 4, 42, 51, 8, 42, 4, 45, 3, 2], [1, 7, 60, 43, 52, 12, 61, 3, 2], [1, 51, 43, 58, 11, 64, 3, 2], [1, 48, 5, 56, 58, 3, 2], [1, 43, 8, 40, 42, 44, 58, 65, 43, 44, 63, 3, 2], [1, 8, 9, 41, 56, 64, 65, 41, 3, 2], [1, 7, 47, 3, 2], [1, 57, 40, 50, 3, 2], [1, 42, 49, 48, 53, 46, 51, 12, 11, 4, 3, 2], [1, 46, 6, 43, 3, 2], [1, 55, 40, 10, 59, 51, 8, 45, 3, 2], [1, 65, 61, 54, 58, 12, 59, 41, 3, 2], [1, 55, 3, 2], [1, 58, 44, 53, 48, 59, 50, 5, 5, 42, 3, 2], [1, 10, 63, 9, 3, 2], [1, 52, 8, 43, 65, 56, 12, 42, 53, 3, 2], [1, 52, 46, 3, 2], [1, 9, 61, 13, 6, 3, 2], [1, 62, 49, 63, 50, 45, 12, 41, 56, 40, 3, 2], [1, 60, 47, 52, 43, 8, 8, 53, 54, 53, 3, 2], [1, 7, 58, 9, 57, 5, 13, 59, 10, 63, 3, 2], [1, 59, 55, 51, 43, 4, 3, 2], [1, 41, 52, 40, 3, 2], [1, 4, 53, 59, 3, 2], [1, 52, 61, 48, 4, 11, 62, 3, 2], [1, 57, 53, 13, 41, 60, 3, 2], [1, 43, 44, 43, 44, 5, 7, 13, 59, 54, 60, 3, 2], [1, 4, 45, 51, 50, 60, 62, 10, 3, 2], [1, 6, 58, 11, 63, 63, 3, 2], [1, 44, 6, 60, 50, 11, 3, 2], [1, 13, 48, 9, 3, 2], [1, 63, 3, 2], [1, 44, 4, 62, 49, 64, 57, 5, 56, 63, 49, 3, 2], [1, 12, 3, 2], [1, 45, 61, 62, 3, 2], [1, 62, 40, 60, 47, 58, 52, 53, 3, 2], [1, 10, 5, 52, 63, 13, 12, 57, 8, 49, 3, 2], [1, 63, 48, 40, 10, 59, 40, 3, 2], [1, 13, 41, 6, 64, 5, 60, 3, 2], [1, 46, 3, 2], [1, 7, 54, 10, 53, 7, 45, 45, 49, 3, 2], [1, 60, 42, 6, 63, 65, 58, 3, 2], [1, 62, 12, 5, 7, 3, 2], [1, 8, 57, 43, 8, 3, 2], [1, 60, 3, 2], [1, 52, 11, 44, 50, 3, 2], [1, 52, 49, 60, 40, 43, 58, 63, 41, 3, 2], [1, 48, 44, 40, 3, 2], [1, 47, 55, 47, 62, 40, 45, 57, 3, 2], [1, 4, 4, 50, 40, 13, 10, 6, 4, 11, 3, 2], [1, 64, 59, 59, 65, 49, 62, 3, 2], [1, 60, 8, 7, 4, 62, 44, 3, 2], [1, 41, 60, 46, 65, 3, 2], [1, 51, 56, 55, 5, 58, 40, 57, 59, 11, 4, 3, 2], [1, 7, 54, 65, 62, 48, 13, 50, 7, 45, 3, 2], [1, 54, 56, 8, 13, 44, 4, 3, 2], [1, 53, 6, 3, 2], [1, 11, 3, 2], [1, 53, 12, 45, 51, 46, 5, 56, 6, 64, 3, 2], [1, 4, 46, 13, 3, 2], [1, 50, 52, 49, 52, 59, 7, 3, 2], [1, 53, 3, 2], [1, 5, 61, 51, 5, 11, 4, 52, 49, 3, 2], [1, 5, 61, 45, 64, 54, 3, 2], [1, 48, 9, 13, 62, 3, 2], [1, 58, 3, 2], [1, 43, 12, 49, 10, 64, 59, 3, 2], [1, 57, 3, 2], [1, 6, 53, 53, 10, 41, 9, 9, 48, 3, 2], [1, 65, 65, 58, 46, 9, 11, 43, 58, 56, 56, 3, 2], [1, 44, 54, 51, 52, 51, 3, 2], [1, 58, 61, 13, 54, 47, 53, 45, 44, 3, 2], [1, 62, 10, 8, 5, 60, 13, 4, 12, 44, 3, 2], [1, 12, 59, 54, 42, 3, 2], [1, 13, 58, 62, 46, 64, 41, 3, 2], [1, 9, 50, 13, 59, 10, 56, 43, 46, 3, 2], [1, 13, 59, 59, 7, 52, 43, 3, 2], [1, 52, 41, 11, 40, 3, 2], [1, 53, 6, 12, 41, 42, 3, 2], [1, 56, 41, 52, 7, 61, 61, 3, 2], [1, 12, 49, 62, 46, 46, 3, 2], [1, 52, 43, 41, 59, 43, 6, 54, 56, 61, 3, 2], [1, 61, 52, 45, 45, 55, 41, 54, 56, 3, 2], [1, 59, 8, 9, 58, 64, 10, 42, 58, 56, 3, 2], [1, 53, 61, 51, 6, 52, 10, 10, 3, 2], [1, 47, 3, 2], [1, 62, 40, 12, 55, 58, 13, 55, 8, 49, 3, 2], [1, 57, 40, 57, 53, 50, 64, 9, 3, 2], [1, 10, 40, 47, 52, 62, 40, 46, 3, 2], [1, 45, 47, 54, 5, 3, 2], [1, 58, 45, 55, 57, 44, 47, 3, 2], [1, 49, 42, 64, 56, 54, 8, 3, 2], [1, 54, 65, 50, 54, 65, 41, 61, 3, 2], [1, 10, 40, 7, 54, 3, 2], [1, 47, 53, 8, 3, 2], [1, 48, 48, 3, 2], [1, 6, 3, 2], [1, 53, 13, 42, 3, 2], [1, 12, 43, 3, 2], [1, 52, 53, 7, 64, 49, 51, 42, 48, 3, 2], [1, 13, 3, 2], [1, 6, 52, 46, 46, 9, 59, 57, 11, 43, 3, 2], [1, 13, 47, 8, 4, 47, 50, 45, 3, 2], [1, 54, 7, 65, 41, 13, 11, 41, 3, 2], [1, 56, 48, 44, 3, 2], [1, 50, 56, 64, 3, 2], [1, 50, 52, 3, 2], [1, 12, 65, 40, 52, 62, 3, 2], [1, 63, 10, 13, 9, 51, 52, 3, 2], [1, 48, 62, 9, 65, 4, 42, 48, 8, 49, 3, 2], [1, 49, 11, 47, 9, 7, 3, 2], [1, 12, 60, 50, 60, 44, 64, 3, 2], [1, 8, 4, 12, 3, 2], [1, 42, 62, 58, 50, 56, 4, 3, 2], [1, 51, 48, 9, 12, 58, 50, 8, 7, 60, 3, 2], [1, 55, 7, 61, 51, 45, 64, 3, 2], [1, 63, 57, 65, 13, 53, 5, 3, 2], [1, 63, 3, 2], [1, 13, 6, 42, 49, 47, 3, 2], [1, 8, 42, 44, 43, 3, 2], [1, 52, 52, 55, 56, 11, 11, 3, 2], [1, 11, 3, 2], [1, 63, 3, 2], [1, 52, 8, 54, 64, 56, 3, 2], [1, 62, 4, 50, 63, 46, 4, 54, 3, 2], [1, 46, 53, 6, 6, 9, 43, 48, 11, 3, 2], [1, 10, 3, 2], [1, 63, 3, 2], [1, 46, 53, 11, 51, 3, 2], [1, 59, 45, 51, 6, 43, 40, 57, 9, 3, 2], [1, 44, 45, 10, 58, 3, 2], [1, 62, 52, 40, 4, 44, 46, 52, 3, 2], [1, 8, 48, 42, 42, 3, 2], [1, 60, 55, 51, 44, 46, 61, 10, 3, 2], [1, 42, 6, 40, 3, 2], [1, 63, 3, 2], [1, 6, 12, 47, 54, 51, 6, 3, 2], [1, 65, 3, 2], [1, 6, 51, 42, 50, 4, 49, 44, 55, 6, 10, 3, 2], [1, 7, 57, 64, 3, 2], [1, 60, 62, 7, 60, 5, 42, 53, 7, 46, 3, 2], [1, 8, 47, 42, 57, 3, 2], [1, 42, 58, 40, 54, 44, 65, 64, 60, 3, 2], [1, 62, 49, 51, 62, 3, 2], [1, 49, 3, 2], [1, 43, 3, 2], [1, 41, 59, 52, 50, 61, 9, 49, 3, 2], [1, 45, 64, 43, 7, 3, 2], [1, 58, 56, 42, 41, 57, 9, 7, 3, 2], [1, 45, 65, 12, 3, 2], [1, 13, 7, 3, 2], [1, 10, 44, 50, 42, 46, 3, 2], [1, 51, 65, 13, 63, 49, 63, 3, 2], [1, 5, 10, 62, 41, 3, 2], [1, 49, 44, 55, 8, 52, 3, 2], [1, 4, 11, 58, 49, 62, 10, 48, 54, 56, 3, 2], [1, 61, 43, 3, 2], [1, 6, 41, 3, 2], [1, 57, 64, 3, 2], [1, 8, 9, 64, 12, 53, 52, 3, 2], [1, 4, 3, 2], [1, 61, 60, 8, 11, 61, 6, 13, 8, 6, 3, 2], [1, 50, 60, 54, 63, 6, 3, 2], [1, 64, 3, 2], [1, 40, 64, 59, 62, 10, 56, 54, 50, 65, 3, 2], [1, 51, 50, 59, 50, 52, 40, 4, 54, 44, 64, 3, 2], [1, 52, 54, 49, 55, 56, 3, 2], [1, 10, 5, 53, 49, 49, 13, 42, 49, 7, 43, 3, 2], [1, 47, 3, 2], [1, 11, 61, 60, 51, 50, 61, 43, 41, 40, 58, 3, 2], [1, 44, 43, 61, 56, 6, 12, 60, 7, 10, 3, 2], [1, 60, 49, 47, 54, 54, 3, 2], [1, 59, 44, 59, 5, 3, 2], [1, 13, 59, 46, 57, 13, 6, 41, 57, 46, 3, 2], [1, 44, 40, 64, 3, 2], [1, 56, 53, 3, 2], [1, 44, 8, 55, 47, 50, 3, 2], [1, 57, 43, 56, 50, 9, 3, 2], [1, 9, 3, 2], [1, 60, 3, 2], [1, 54, 50, 3, 2], [1, 4, 10, 44, 57, 53, 44, 4, 3, 2], [1, 9, 43, 3, 2], [1, 52, 45, 40, 61, 3, 2], [1, 13, 60, 62, 46, 12, 56, 3, 2], [1, 51, 47, 3, 2], [1, 50, 12, 10, 58, 43, 46, 3, 2], [1, 13, 6, 4, 45, 3, 2], [1, 61, 7, 3, 2], [1, 43, 64, 6, 65, 3, 2], [1, 56, 5, 43, 3, 2], [1, 7, 61, 9, 3, 2], [1, 51, 45, 55, 63, 3, 2], [1, 42, 10, 3, 2], [1, 4, 60, 53, 3, 2], [1, 53, 43, 42, 3, 2], [1, 46, 10, 9, 3, 2], [1, 45, 46, 8, 63, 45, 58, 3, 2], [1, 11, 55, 45, 57, 53, 7, 57, 58, 60, 3, 2], [1, 59, 9, 47, 62, 4, 50, 57, 13, 63, 3, 2], [1, 42, 13, 13, 3, 2], [1, 61, 13, 5, 44, 54, 65, 52, 45, 51, 61, 3, 2], [1, 64, 42, 9, 3, 2], [1, 56, 61, 44, 55, 4, 4, 13, 40, 58, 3, 2], [1, 47, 65, 7, 58, 4, 65, 12, 62, 3, 2], [1, 12, 43, 50, 3, 2], [1, 48, 50, 48, 42, 3, 2], [1, 10, 10, 49, 62, 13, 51, 45, 3, 2], [1, 9, 40, 53, 12, 3, 2], [1, 62, 3, 2], [1, 43, 5, 7, 3, 2], [1, 52, 3, 2], [1, 57, 52, 56, 10, 53, 41, 45, 54, 54, 3, 2], [1, 56, 55, 55, 3, 2], [1, 58, 3, 2], [1, 49, 45, 50, 48, 3, 2], [1, 51, 5, 10, 45, 6, 57, 8, 56, 43, 6, 3, 2], [1, 5, 65, 41, 48, 7, 60, 3, 2], [1, 11, 49, 46, 3, 2], [1, 13, 60, 8, 61, 43, 58, 59, 63, 42, 3, 2], [1, 40, 52, 51, 57, 43, 64, 59, 43, 13, 3, 2], [1, 11, 8, 42, 54, 9, 13, 5, 5, 45, 3, 2], [1, 61, 3, 2], [1, 61, 3, 2], [1, 50, 11, 7, 12, 64, 63, 45, 3, 2], [1, 4, 13, 62, 7, 55, 54, 3, 2], [1, 45, 55, 49, 49, 59, 40, 8, 47, 3, 2], [1, 11, 62, 43, 8, 47, 44, 60, 48, 46, 3, 2], [1, 56, 62, 55, 55, 43, 13, 3, 2], [1, 48, 4, 65, 43, 54, 3, 2], [1, 60, 61, 5, 12, 3, 2], [1, 62, 43, 9, 3, 2], [1, 61, 62, 3, 2], [1, 11, 13, 61, 44, 3, 2], [1, 54, 65, 43, 9, 3, 2], [1, 8, 45, 58, 45, 56, 52, 42, 54, 41, 3, 2], [1, 42, 62, 45, 65, 51, 51, 3, 2], [1, 7, 48, 10, 52, 46, 4, 3, 2], [1, 52, 65, 62, 43, 5, 12, 3, 2], [1, 45, 11, 64, 7, 10, 9, 3, 2], [1, 45, 47, 40, 10, 3, 2], [1, 8, 60, 12, 47, 12, 4, 13, 55, 52, 3, 2], [1, 64, 45, 63, 9, 4, 41, 48, 3, 2], [1, 62, 61, 58, 3, 2], [1, 11, 61, 54, 65, 61, 50, 57, 50, 3, 2], [1, 56, 50, 52, 63, 10, 59, 43, 13, 3, 2], [1, 40, 56, 60, 11, 62, 10, 60, 62, 50, 6, 3, 2], [1, 11, 45, 44, 7, 3, 2], [1, 12, 13, 59, 43, 57, 59, 61, 3, 2], [1, 58, 3, 2], [1, 52, 49, 57, 8, 46, 44, 53, 3, 2], [1, 11, 10, 44, 7, 3, 2], [1, 9, 61, 64, 3, 2], [1, 5, 57, 10, 61, 59, 3, 2], [1, 63, 3, 2], [1, 54, 6, 41, 58, 6, 41, 40, 3, 2], [1, 8, 54, 58, 58, 3, 2], [1, 53, 6, 11, 3, 2], [1, 51, 59, 45, 42, 45, 43, 10, 3, 2], [1, 57, 54, 51, 11, 7, 65, 3, 2], [1, 43, 51, 3, 2], [1, 44, 55, 3, 2], [1, 41, 13, 43, 5, 54, 56, 45, 41, 60, 7, 3, 2], [1, 11, 42, 53, 48, 56, 61, 47, 42, 50, 3, 2], [1, 46, 46, 43, 61, 6, 53, 48, 60, 3, 2], [1, 8, 3, 2], [1, 53, 40, 13, 54, 6, 6, 58, 60, 53, 41, 3, 2], [1, 55, 52, 58, 10, 3, 2], [1, 58, 44, 51, 58, 59, 48, 3, 2], [1, 9, 48, 62, 57, 56, 65, 11, 8, 44, 7, 3, 2], [1, 58, 7, 48, 3, 2], [1, 42, 58, 51, 59, 3, 2]]
    print(' labels_tensor', labels_tensor)

    label_max_len = max_length(labels_tensor)


    labels_tensor = tf.keras.preprocessing.sequence.pad_sequences(labels_tensor, maxlen=label_max_len, padding='post')
    '''
    labels_tensor preprocess 
    [[ 1 53 61 ...  0  0  0]
     [ 1 47  5 ... 52  3  2]
     [ 1 52 13 ...  0  0  0]
    '''
    print(' labels_tensor preprocess', labels_tensor)

    sparse_label=tf.sparse.to_dense(sparse_label)
    sparse_label=tf.cast(sparse_label,tf.int32)
    print('sparse_label cc',sparse_label)

    return img_paths_tensor, labels_tensor, labels, label_lang, label_max_len,sparse_label


img_paths_tensor, labels_tensor, labels, label_lang, label_max_len ,sparse_label= load_dataset(root)

BATCH_SIZE = cfg.TRAIN_BATCH_SIZE
N_BATCH = len(img_paths_tensor) // BATCH_SIZE
embedding_dim = cfg.EMBEDDING_DIM
units = cfg.UNITS

vocab_size = len(label_lang.word2idx)


def map_func(img_path_tensor, label_tensor, label,sparse_label):
    # print('img_path_tensor',img_path_tensor)

    image = tf.io.read_file(img_path_tensor)
    image = tf.io.decode_jpeg(image, channels=3)
    image = tf.image.convert_image_dtype(image, tf.float32)
    imread = tf.image.resize(image, (32, 100))

    # imread = cv2.imread(img_path_tensor, cv2.IMREAD_GRAYSCALE)
    # if imread is None:
    #     print(img_path_tensor)
    # imread = resize_image(imread, 100, 32)
    # print('imread.shape',imread.shape)
    # imread = np.expand_dims(imread, axis=-1)#最后一维看情况需不需要扩充
    imread = np.array(imread, np.float32)
    # print('labels',label_tensor, label)
    return imread, label_tensor, label,sparse_label

# def _decode_and_resize( filename, label):
#         image = tf.io.read_file(filename)
#         image = tf.io.decode_jpeg(image, channels=1)
#         image = tf.image.convert_image_dtype(image, tf.float32)
#         image = tf.image.resize(image, (32, image_width))
#         return image, label






dataset = tf.data.Dataset.from_tensor_slices((img_paths_tensor, labels_tensor, labels,sparse_label)) \
    .map(lambda item1, item2, item3,item4:
                   tf.py_function(map_func, [item1, item2, item3,item4], [tf.float32, tf.int32, tf.string, tf.int32]),
         num_parallel_calls=2) \
    .shuffle(10000, reshuffle_each_iteration=True).prefetch(2)
dataset = dataset.batch(BATCH_SIZE, drop_remainder=True)

encoder = Encoder(units, BATCH_SIZE)
# encoder = Encoder()
decoder = Decoder(vocab_size, embedding_dim, units, BATCH_SIZE)

# global_step = tf.train.get_or_create_global_step()
# global_step=tf.train.create_global_step()
start_learning_rate = cfg.LEARNING_RATE
learning_rate = tf.Variable(start_learning_rate, dtype=tf.float32)

optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)


def loss_function(real, pred):
    mask = 1 - np.equal(real, 0)
    loss_ = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=real, logits=pred) * mask
    return tf.reduce_mean(loss_)

#
# checkpoint_dir = './checkpoints'
# checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
# checkpoint_raw = tf.train.Checkpoint(optimizer=optimizer, encoder=encoder, decoder=decoder)
#
# checkpoint_raw.restore(tf.train.latest_checkpoint(checkpoint_dir))

custom_loss=CTCLoss()




checkpoint_dir = './checkpoints'
# checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
checkpoint = tf.train.Checkpoint(optimizer=optimizer, encoder=encoder, decoder=decoder)
manager = tf.train.CheckpointManager(checkpoint, directory=checkpoint_dir , checkpoint_name='ckpt', max_to_keep=5)

status=checkpoint.restore(manager.latest_checkpoint)
print('status',status)
print('optimizer.iterations.numpy()',optimizer.iterations.numpy())#optimizer.iterations.numpy() 1062
lr = max(0.00001, start_learning_rate  * math.pow(0.99, optimizer.iterations.numpy()//30))
learning_rate.assign(lr)

# for (batch, (inp, targ, ground_truths, sparse_label)) in enumerate(dataset):
#     print('sparse_label ss',sparse_label)



EPOCHS = 400

logdir = "./logs/"
writer = tf.summary.create_file_writer(logdir)
# writer.set_as_default()
# print('dataset',dataset)

# for (batch, (inp, targ, ground_truths)) in enumerate(dataset):
#     print('batch', batch)
#     print('inp shape', inp.shape)  # inp shape (64, 32, 100, 1, 1)

gamma=0.9


with writer.as_default():
# if True:
    for epoch in range(EPOCHS):
        start = time.time()

        total_loss = 0
        lr = max(0.00001, start_learning_rate * math.pow(0.99, epoch))
        learning_rate.assign(lr)
        # print('start')

        for (batch, (inp, targ, ground_truths,sparse_label)) in enumerate(dataset):
            '''
            ground_truths tf.Tensor(
           [b'CWSKQ0' b'V' b'D8J6YT' b'KUOX2' b'H1C42Y5CMM' b'VW' b'SELSTI' b'FVW'

            '''
            # print('ground_truths',ground_truths)
            # print('batch',batch)
            # print('inp shape',inp.shape)#inp shape (64, 32, 100, 1, 1)
            # step=epoch*N_BATCH+batch
            # print('epoch={},step={},batch={}'.format(epoch,step,batch))
            loss = 0
            # global_step.assign_add(1)

            results = np.zeros((BATCH_SIZE, targ.shape[1] - 1), np.int32)

            with tf.GradientTape() as tape:
                enc_output ,enc_hidden= encoder(inp)
                #24是自定义pooling层获取
                # print('enc_output shape',enc_output.shape)#shape=(30, 24, 512)=(batch_size,)
                # print('sparse_label_now',sparse_label)
                # print('ground_truths',ground_truths)
                indices = tf.where(tf.not_equal(sparse_label, tf.constant(0, dtype=tf.int32)))#sparse_label或者trg
                values = tf.gather_nd(sparse_label, indices)
                sparse_labels = tf.SparseTensor(indices, values, dense_shape=tf.shape(sparse_label, out_type=tf.int64))

                batch_loss_ctc = custom_loss(sparse_labels, enc_output)


                dec_hidden = enc_hidden

                dec_input = tf.expand_dims([label_lang.word2idx['<start>']] * BATCH_SIZE, 1)

                # Teacher forcing - feeding the target as the next input
                for t in range(1, targ.shape[1]):
                    # passing enc_output to the decoder
                    predictions, dec_hidden, _ = decoder(dec_input, dec_hidden, enc_output)

                    predicted_id = tf.argmax(predictions, axis=-1).numpy()

                    results[:, t - 1] = predicted_id

                    loss += loss_function(targ[:, t], predictions)

                    # using teacher forcing
                    dec_input = tf.expand_dims(targ[:, t], 1)

                '''
                all loss tf.Tensor(8.913311, shape=(), dtype=float32) 
                 tf.Tensor(127.09015, shape=(), dtype=float32)
               
                '''

                batch_loss=tf.divide(loss ,int(targ.shape[1]))
                # batch_loss = (loss / int(targ.shape[1]))
                # batch_loss+=batch_loss_ctc

                print('batch_loss={},batch_loss_ctc={}'.format(batch_loss,batch_loss_ctc))

                #要把写到tape里面，否则不对
                total_loss += batch_loss
                batch_loss=gamma*batch_loss+(1-gamma)*batch_loss_ctc

            # variables = encoder.variables + decoder.variables
            variables=encoder.trainable_variables+decoder.trainable_variables

            gradients = tape.gradient(batch_loss, variables)#loss,batch_ctc_loss

            optimizer.apply_gradients(zip(gradients, variables))
            step = optimizer.iterations.numpy()
            print('step={}'.format(step))


            preds = [process_result(result, label_lang) for result in results]

            ground_truths = [l.numpy().decode() for l in ground_truths]

            acc = compute_accuracy(ground_truths, preds)

            tf.summary.scalar('loss', batch_loss,step=step)
            tf.summary.scalar('accuracy', acc,step=step)
            tf.summary.scalar('lr', learning_rate.numpy(),step=step)
            writer.flush()

            # if batch % 9 == 0:
            if step % 30 == 0:
                lr = max(0.00001, start * math.pow(0.99, step//30))
                learning_rate.assign(lr)
                print('Epoch {} Batch {}/{} Loss {:.4f}  acc {:f}'.format(epoch + 1, batch, N_BATCH,
                                                                          batch_loss.numpy(),
                                                                          acc))
                path = manager.save(checkpoint_number=step)
                print("model saved to %s" % path)
            if step % 30 == 0:
                for i in range(3):
                    print("real:{:s}  pred:{:s} acc:{:f}".format(ground_truths[i], preds[i],
                                                                 compute_accuracy([ground_truths[i]], [preds[i]])))

                # checkpoint_raw.save(file_prefix=checkpoint_prefix)

        print('Time taken for 1 epoch {} sec\n'.format(time.time() - start))
'''
abels tf.Tensor([ 1 55 14 22 27 33 15 31 34 32 21 18 32  3  2], shape=(15,), dtype=int32) tf.Tensor(b'Paintbrushes', shape=(), dtype=string)
labels tf.Tensor([ 1 42 31 18 14 33 22 28 27 22 32 26 32  3  2], shape=(15,), dtype=int32) tf.Tensor(b'Creationisms', shape=(), dtype=string)
labels tf.Tensor([ 1 57 18 22 26 15 34 31 32 22 27 20  3  2  0], shape=(15,), dtype=int32) tf.Tensor(b'Reimbursing', shape=(), dtype=string)
Ti


ARNING:tensorflow:Gradients do not exist for variables ['decoder/embedding/embeddings:0', 'decoder/gru/kernel:0', 'decoder/gru/recurrent_kernel:0', 'decoder/gru/bias:0', 'decoder/dense/kernel:0', 'decoder/dense/bias:0', 'decoder/bahdanau_attention/dense_1/kernel:0', 'decoder/bahdanau_attention/dense_1/bias:0', 'decoder/bahdanau_attention/dense_2/kernel:0', 'decoder/bahdanau_attention/dense_2/bias:0', 'decoder/bahdanau_attention/dense_3/kernel:0', 'decoder/bahdanau_attention/dense_3/bias:0'] when minimizing the loss.

'''